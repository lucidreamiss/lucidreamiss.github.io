{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1654668310744},{"_id":"source/_posts/cpu-cache.md","hash":"07bc6d85af5c6de23d8c9b7022e243f187f68074","modified":1656819664654},{"_id":"source/_posts/how-cpu-execute.md","hash":"25a86262a415bb54e1fed8d69dec90fb1946e583","modified":1656735668717},{"_id":"source/_posts/hello-world.md","hash":"992eb12030c97f16443b97ab10101f56852b2121","modified":1654683984305},{"_id":"source/_posts/hexo-writing-skills.md","hash":"a3df86ff23131743d7f2d6dbe1b5ebcbe65e38ae","modified":1656750240610},{"_id":"source/_posts/面经.txt","hash":"1a6af39d7b84f9335f0a4c6f8f9ccf41bdb9568e","modified":1656677434835},{"_id":"source/_posts/memory-hierarchy.md","hash":"62032d95164e188e7551a2261d4d6122b2c6a95a","modified":1656762635396},{"_id":"source/categories/index.md","hash":"aee2c5e57dc28322f727617488ec89ca13299877","modified":1654668247095},{"_id":"source/tags/index.md","hash":"889314639c28553c455a47e46503dcfa62553e1d","modified":1654668401750},{"_id":"source/favicon.png","hash":"073796f6e3d207ad54dd82b3c06eff44949a18d3","modified":1654670992591},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1627608806000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1627608806000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1627608806000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1627608806000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1627608806000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1627608806000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1627608806000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1627608806000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1627608806000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1627608806000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1627608806000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1627608806000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1627608806000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1627608806000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1627608806000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1627608806000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1627608806000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1627608806000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1627608806000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1627608806000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1627608806000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1627608806000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1627608806000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1627608806000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1627608806000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1627608806000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1627608806000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1627608806000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1627608806000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1627608806000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1627608806000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1627608806000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1627608806000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1627608806000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1627608806000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1627608806000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1627608806000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1627608806000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1627608806000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1627608806000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1627608806000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1627608806000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1627608806000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1627608806000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1627608806000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1627608806000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1627608806000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1627608806000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1627608806000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1627608806000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1627608806000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1627608806000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1627608806000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1627608806000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1627608806000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1627608806000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1627608806000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1627608806000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1627608806000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1627608806000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1627608806000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1627608806000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1627608806000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1627608806000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1627608806000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1627608806000},{"_id":"themes/next/layout/_macro/post-end-tag.swig","hash":"6fb64d22b0ddf0555fb76a80e7cafaca37a8aab2","modified":1654682203603},{"_id":"themes/next/layout/_macro/post.swig","hash":"f28eee9bfb11ab29aa1f1c8b244c2bf7f52f23ba","modified":1654682300098},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1627608806000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1627608806000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1627608806000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1627608806000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1654669990723},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1627608806000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1627608806000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1627608806000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1627608806000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1627608806000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1627608806000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1627608806000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1627608806000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1627608806000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1627608806000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1627608806000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1627608806000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1627608806000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1627608806000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1627608806000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1627608806000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1627608806000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1627608806000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1627608806000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1627608806000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1627608806000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1627608806000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1627608806000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1627608806000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1627608806000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1627608806000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1627608806000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1627608806000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1627608806000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1627608806000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1627608806000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1627608806000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1627608806000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1627608806000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1627608806000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1627608806000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1627608806000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1627608806000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1627608806000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1627608806000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1627608806000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1627608806000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1627608806000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1627608806000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1627608806000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1627608806000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1627608806000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1627608806000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1627608806000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1627608806000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1627608806000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1627608806000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1627608806000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1627608806000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1627608806000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1627608806000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1627608806000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1627608806000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1627608806000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a0bf932bfdd099514f1b7e1211f15372a4b2c48f","modified":1654747337104},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1654673363452},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1654673363452},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1654673363452},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"8286582ed7c338fce8bb03566b769fba378bce83","modified":1654673363453},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1654682421356},{"_id":"themes/next/source/lib/pace/README.md","hash":"168f57bb63563b9671d0c4f10c0940e7eec261f0","modified":1654682421356},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1654682421356},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1654682421356},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1654682421357},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1654682421359},{"_id":"themes/next/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1654682421358},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1654682421359},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1627608806000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1627608806000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1627608806000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1627608806000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1627608806000},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1654673363449},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1654673363451},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1654673361381},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"b6ffcdb23c4f9b3e5576fe104e8596ea71603c84","modified":1654673363447},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1654673363453},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"0bc35eaad3c3df74906d4e1141acf58f22384ca2","modified":1654673363455},{"_id":"themes/next/source/lib/fancybox/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1654673363452},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1654673363453},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1627608806000},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1654682421352},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1654682421354},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1654682419235},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"7728d474cdaa7943851d42c42eaa718b8afbab97","modified":1654682421350},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1654682421356},{"_id":"themes/next/source/lib/pace/.git/index","hash":"36c86a9b57e322b858d6dc00c05ae272ba7cebc7","modified":1654682421359},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1627608806000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1627608806000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1627608806000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1627608806000},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1654673361382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1654673361382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1654673361382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1654673361382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1654673361382},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1654673361384},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1654673361383},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1654673361381},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"ee5839505b5ff9b7dec008243e116c50c78e655c","modified":1654673363450},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1654682419237},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1654682419236},{"_id":"themes/next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1654682419237},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1654682419238},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1654682419239},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1654682419236},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1654682419238},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1654682419239},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1654682419237},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1654682419236},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1654682419238},{"_id":"themes/next/source/lib/pace/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1654682419239},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1654682419239},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1654682419234},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"bd458f9e97211f662644573749bf8e2b8616d9fd","modified":1654682421353},{"_id":"themes/next/source/lib/fancybox/.git/objects/pack/pack-30cab214c43b61c7f7e6b1f769ac808d67a1ac07.idx","hash":"2e7f35b479ff5f8e559792ca6c1925a5edbcd2f8","modified":1654673363437},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1654673363450},{"_id":"themes/next/source/lib/pace/.git/objects/pack/pack-a216b3a30ac40cd759f5986da014d2e403d1e7ba.idx","hash":"9d38ccbcc91ea9aa27a81c3e387044a01b2341fe","modified":1654682421341},{"_id":"themes/next/source/lib/pace/.git/objects/pack/pack-a216b3a30ac40cd759f5986da014d2e403d1e7ba.pack","hash":"18445e371c7ea0fa1976e4c5d8da6685cce0c1c9","modified":1654682421341},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"22684435265b2bb504024b34b80ffbd6786a2411","modified":1654682421353},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"ee5839505b5ff9b7dec008243e116c50c78e655c","modified":1654673363450},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1654673363449},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"bd458f9e97211f662644573749bf8e2b8616d9fd","modified":1654682421353},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1654682421352},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"ee5839505b5ff9b7dec008243e116c50c78e655c","modified":1654673363449},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"bd458f9e97211f662644573749bf8e2b8616d9fd","modified":1654682421352},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1654673363454},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1627608806000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1627608806000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1654673363454},{"_id":"themes/next/source/lib/fancybox/.git/objects/pack/pack-30cab214c43b61c7f7e6b1f769ac808d67a1ac07.pack","hash":"293fd150066cec7291b8c720d658605d1a8e6e8b","modified":1654673363437},{"_id":"public/search.xml","hash":"d2c6f3ea9aad4a3c265f86fc64031449fe83f548","modified":1656819696061},{"_id":"public/categories/index.html","hash":"c064493bbc2d4c7f504ec05a7d06675acb30d781","modified":1656819696061},{"_id":"public/about/index.html","hash":"ead5fd5da21500c3d382acf84a973e68d6e09f81","modified":1656819696061},{"_id":"public/tags/index.html","hash":"4a6580c3df0c63f2d5e8453b9e248cb87e2ce752","modified":1656819696061},{"_id":"public/2021/12/31/hello-world/index.html","hash":"06ebcb2d78a19a8b232cda180e61ea45a86d17a4","modified":1656819696061},{"_id":"public/archives/index.html","hash":"04af6ca3c0e974af4da7f1f7c4a6d2160783d7e5","modified":1656819696061},{"_id":"public/archives/2021/index.html","hash":"1b33284ec46b64a6b342f2165358cd43d1fe1fba","modified":1656819696061},{"_id":"public/archives/2021/12/index.html","hash":"e83dffb2f298d0c3b291eb0ac0cfeb10ae4e7cf5","modified":1656819696061},{"_id":"public/archives/2022/index.html","hash":"9eb0ce1a1caf1b52eb5dea11bfc98d076faaf50d","modified":1656819696061},{"_id":"public/archives/2022/01/index.html","hash":"79a621154a1cbacafd3e9df2ea9788e4f968dbc6","modified":1656819696061},{"_id":"public/archives/2022/07/index.html","hash":"dd500630a3411e2961d80db3e0dadffc8af15881","modified":1656819696061},{"_id":"public/tags/操作系统/index.html","hash":"db6c76101a897ce7d568c00ee392d9c4a944822c","modified":1656819696061},{"_id":"public/tags/CPU/index.html","hash":"e78663621c78c14c2191a46300b76aac78161793","modified":1656819696061},{"_id":"public/tags/CPU-Cache/index.html","hash":"aab279f94a47486f69a8189269a2ef0dff20890b","modified":1656819696061},{"_id":"public/tags/Hexo/index.html","hash":"93dda37e682d31a351c4df867abaf69a8bd3badd","modified":1656819696061},{"_id":"public/tags/Markdown/index.html","hash":"944d8aff78af25351d0f5478a06c575e5796ea17","modified":1656819696061},{"_id":"public/tags/存储器/index.html","hash":"cd691ce1e2e10a4fb90715b2098fbf9bbeb067e5","modified":1656819696061},{"_id":"public/2022/07/02/cpu-cache/index.html","hash":"5529d536efb934d518832e36ef465933fc061db3","modified":1656819696061},{"_id":"public/2022/01/24/memory-hierarchy/index.html","hash":"af40d2b2f01d95ecab2c6c7c2521e6d8d1dc0314","modified":1656819696061},{"_id":"public/2022/01/23/how-cpu-execute/index.html","hash":"0c197cc313a702b3374f68a37275fc39a63a3edd","modified":1656819696061},{"_id":"public/2022/01/03/hexo-writing-skills/index.html","hash":"0db5f13dcfeccbefe0f446d708fa6010ce12aef3","modified":1656819696061},{"_id":"public/index.html","hash":"41a0cefd8858c01a88e64e2bf100b76769e434fa","modified":1656819696061},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1656819696061},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1656819696061},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1656819696061},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1656819696061},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1656819696061},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1656819696061},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1656819696061},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1656819696061},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1656819696061},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1656819696061},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1656819696061},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1656819696061},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1656819696061},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1656819696061},{"_id":"public/live2dw/assets/koharu.model.json","hash":"ceccdefd776b7c9475a29cff0842796e4f58b7e9","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"61d7d590d9feb71b32fd6bd142b59410d75bc1fa","modified":1656819696061},{"_id":"public/live2dw/assets/koharu.physics.json","hash":"2fbf886979212357ba293bd35884f2cb5b26b6a6","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"a72b697a92a7cff40d15774b143b465b34cee5e6","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"32c888667455a3ff6f1b04f910c1a5cc4de30af0","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"637e00442da4042cd4b0ed2cc62ffb1559881814","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"efc99efdff39c93372cff0f6d62c4e748e1a5593","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"9b95ef8548b979d1fca557c74f8d66fb15b34578","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"df10cc1d333c96da1296a4853c1ddbd44d8a11f3","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"d8c9410135c81604eba665b59808089808e0851a","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/09.mtn","hash":"ecf1283b72e1c4b7e3a97343cd97726813f18790","modified":1656819696061},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"058d4628ab04bf42c279501ba4fa37116d384e41","modified":1656819696061},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1656819696061},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1656819696061},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1656819696061},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1656819696061},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1656819696061},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1656819696061},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1656819696061},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1656819696061},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1656819696061},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1656819696061},{"_id":"public/lib/fancybox/README.html","hash":"a4aaf51e67fb87df01c2a65f9fc2882bc53a8f54","modified":1656819696061},{"_id":"public/lib/pace/README.html","hash":"b1db0e6c71c25fbdc5a161e1bd70382846ce99ab","modified":1656819696061},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1656819696061},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1656819696061},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1656819696061},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1656819696061},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1656819696061},{"_id":"public/css/main.css","hash":"f7811d2aacba9903864dfd16cf5f278e99a9218f","modified":1656819696061},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1656819696061},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1656819696061},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1656819696061},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1656819696061},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1656819696061},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1656819696061},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1656819696061},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1656819696061},{"_id":"public/live2dw/assets/moc/koharu.moc","hash":"5eec3fba21444dd6f774b913510b5955e2c0605b","modified":1656819696061},{"_id":"public/favicon.png","hash":"073796f6e3d207ad54dd82b3c06eff44949a18d3","modified":1656819696061},{"_id":"public/live2dw/assets/moc/koharu.2048/texture_00.png","hash":"0879b61b745084781722636bba9f278f31ce5fc1","modified":1656819696061},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1656819696061}],"Category":[],"Data":[],"Page":[{"title":"Categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ncomments: false\n---\n","date":"2022-06-08T06:04:07.095Z","updated":"2022-06-08T06:04:07.095Z","path":"categories/index.html","layout":"page","_id":"cl54ro3sv0000n5q70u18f53m","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"length":0,"excerpt":"","more":""},{"_content":"","source":"about/index.md","raw":"","date":"2022-06-08T06:05:10.744Z","updated":"2022-06-08T06:05:10.744Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cl54ro3t00002n5q79u3jcn1p","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Tags","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ncomments: false\n---\n","date":"2022-06-08T06:06:41.750Z","updated":"2022-06-08T06:06:41.750Z","path":"tags/index.html","layout":"page","_id":"cl54ro3t30005n5q713as98bg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"CPU Cache","date":"2022-07-02T11:50:59.000Z","_content":"\n## CPU Cache的数据结构与读取过程\n\n`CPU Cache`的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为`Cache Line` (缓存块)。Cache Line对应到内存的那一小块数据称为`Block`(内存块)。\n可以使用以下命令查看`Cache Line`的大小:\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size\n64\n```\n\n64即64字节，即`L1 CPU Cache`一次载入的数据大小为64字节。\n比如，有一个`int array[100]`的数组，当载入array[0]时，也会同时将array[1]~array[15]载入，作为一个Cache Line存入到CPU Cache中，那么当下次再访问这些元素时，就可以直接在内存中读取了，从而大大提高了CPU读取数据的性能。\n事实上，CPU读取数据的时候，无论数据是否存放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据后，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从Cache中获取数据，这样的交互方式也满足存储器的层次关系，即每层存储器只与他的上一层和下一层交互。\n\n那么CPU是怎么知道要访问的内存数据缓存到了CPU Cache里面的呢？\n\n### 直接映射Cache\n\n我们先以直接映射为例，看看CPU Cache的数据结构和访问逻辑。\n`直接映射Cache`采用的策略就是把`Block（内存块）`的地址始终映射在一个`Cache Line(缓存块)`的地址上，映射关系也简单粗暴的使用**取模运算**。\n如下图，地址为**7**的`Cache Line（缓存块）`可以映射地址为**7、15、23、31**的`Block（内存块）`\n\n![求模运算策略](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/cpu-cache/%E6%B1%82%E6%A8%A1%E6%98%A0%E5%B0%84%E7%AD%96%E7%95%A5.webp)\n\n我们也能发现，`Block`和`Cache Line`是多对一的，这里就需要特定的标识来区别不同的`Block`，这里特定的标识被称为`Tag(组标记)`。`Tag`会记录当前存储的数据对应哪个`Block`。除了`Tag`外，Cache Line中还有两个信息：\n\n- `Data`，从内存中实际加载进来的数据。\n- `Valid bit（有效位）`，用来标记对应的CPU Line中的数据是否有效，0表示该数据失效，此时CPU会重新访问内存来加载数据。\n\nCPU在从CPU Cache读取数据的时候，仅会读取`Cache Line`中一部分数据，这部分数据片段称为`Word（字）`，怎么在`Cache Line`中获取`Word`呢，则需要一个offset（偏移量）。\n\n因此，一个内存的访问地址，包括`Tag（组标记）、CPU Cache地址、Offset（偏移量）`这三种信息，靠这三个信息就可以取得CPU想要的数据。\n\n那么CPU Cache的数据结构就包括`地址、Valid bit（有效位）、Tag（组标记）、Data（数据）`组成。\n\n### 全相连Cache\n\n### 组相连Cache\n\n## CPU Cache的数据写入过程\n\n上面我们聊了CPU是怎么从CPU Cache中读数据的，接下来我们聊下CPU是怎么通过CPU Cache写数据的。\n\n我们知道，`CPU Cache`的职责是为`内存`缓冲数据以便供`CPU`使用的，当CPU想要向`内存`写入数据的时候，也必须经过CPU Cache这一层，再由CPU Cache把数据同步到内存里，那么同步时机是什么时候呢？下面有两种方式：\n\n- 写直达，把数据直接同时写入到内存与Cache中。\n    - 当CPU Cache中有数据时，更新CPU Cache的数据，再把CPU Cache的数据同步到内存中。\n    - 当CPU Cache没有数据时，直接把数据写入到内存中。\n- 写回","source":"_posts/cpu-cache.md","raw":"---\ntitle: CPU Cache\ndate: 2022-07-02 19:50:59\ntags: [操作系统, CPU, CPU Cache]\n---\n\n## CPU Cache的数据结构与读取过程\n\n`CPU Cache`的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为`Cache Line` (缓存块)。Cache Line对应到内存的那一小块数据称为`Block`(内存块)。\n可以使用以下命令查看`Cache Line`的大小:\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size\n64\n```\n\n64即64字节，即`L1 CPU Cache`一次载入的数据大小为64字节。\n比如，有一个`int array[100]`的数组，当载入array[0]时，也会同时将array[1]~array[15]载入，作为一个Cache Line存入到CPU Cache中，那么当下次再访问这些元素时，就可以直接在内存中读取了，从而大大提高了CPU读取数据的性能。\n事实上，CPU读取数据的时候，无论数据是否存放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据后，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从Cache中获取数据，这样的交互方式也满足存储器的层次关系，即每层存储器只与他的上一层和下一层交互。\n\n那么CPU是怎么知道要访问的内存数据缓存到了CPU Cache里面的呢？\n\n### 直接映射Cache\n\n我们先以直接映射为例，看看CPU Cache的数据结构和访问逻辑。\n`直接映射Cache`采用的策略就是把`Block（内存块）`的地址始终映射在一个`Cache Line(缓存块)`的地址上，映射关系也简单粗暴的使用**取模运算**。\n如下图，地址为**7**的`Cache Line（缓存块）`可以映射地址为**7、15、23、31**的`Block（内存块）`\n\n![求模运算策略](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/cpu-cache/%E6%B1%82%E6%A8%A1%E6%98%A0%E5%B0%84%E7%AD%96%E7%95%A5.webp)\n\n我们也能发现，`Block`和`Cache Line`是多对一的，这里就需要特定的标识来区别不同的`Block`，这里特定的标识被称为`Tag(组标记)`。`Tag`会记录当前存储的数据对应哪个`Block`。除了`Tag`外，Cache Line中还有两个信息：\n\n- `Data`，从内存中实际加载进来的数据。\n- `Valid bit（有效位）`，用来标记对应的CPU Line中的数据是否有效，0表示该数据失效，此时CPU会重新访问内存来加载数据。\n\nCPU在从CPU Cache读取数据的时候，仅会读取`Cache Line`中一部分数据，这部分数据片段称为`Word（字）`，怎么在`Cache Line`中获取`Word`呢，则需要一个offset（偏移量）。\n\n因此，一个内存的访问地址，包括`Tag（组标记）、CPU Cache地址、Offset（偏移量）`这三种信息，靠这三个信息就可以取得CPU想要的数据。\n\n那么CPU Cache的数据结构就包括`地址、Valid bit（有效位）、Tag（组标记）、Data（数据）`组成。\n\n### 全相连Cache\n\n### 组相连Cache\n\n## CPU Cache的数据写入过程\n\n上面我们聊了CPU是怎么从CPU Cache中读数据的，接下来我们聊下CPU是怎么通过CPU Cache写数据的。\n\n我们知道，`CPU Cache`的职责是为`内存`缓冲数据以便供`CPU`使用的，当CPU想要向`内存`写入数据的时候，也必须经过CPU Cache这一层，再由CPU Cache把数据同步到内存里，那么同步时机是什么时候呢？下面有两种方式：\n\n- 写直达，把数据直接同时写入到内存与Cache中。\n    - 当CPU Cache中有数据时，更新CPU Cache的数据，再把CPU Cache的数据同步到内存中。\n    - 当CPU Cache没有数据时，直接把数据写入到内存中。\n- 写回","slug":"cpu-cache","published":1,"updated":"2022-07-02T11:50:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54ro3sx0001n5q7ad2jdou3","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"CPU-Cache的数据结构与读取过程\"><a href=\"#CPU-Cache的数据结构与读取过程\" class=\"headerlink\" title=\"CPU Cache的数据结构与读取过程\"></a>CPU Cache的数据结构与读取过程</h2><p><code>CPU Cache</code>的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为<code>Cache Line</code> (缓存块)。Cache Line对应到内存的那一小块数据称为<code>Block</code>(内存块)。<br>可以使用以下命令查看<code>Cache Line</code>的大小:</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size</span></span><br><span class=\"line\">64</span><br></pre></td></tr></table></figure>\n\n<p>64即64字节，即<code>L1 CPU Cache</code>一次载入的数据大小为64字节。<br>比如，有一个<code>int array[100]</code>的数组，当载入array[0]时，也会同时将array[1]~array[15]载入，作为一个Cache Line存入到CPU Cache中，那么当下次再访问这些元素时，就可以直接在内存中读取了，从而大大提高了CPU读取数据的性能。<br>事实上，CPU读取数据的时候，无论数据是否存放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据后，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从Cache中获取数据，这样的交互方式也满足存储器的层次关系，即每层存储器只与他的上一层和下一层交互。</p>\n<p>那么CPU是怎么知道要访问的内存数据缓存到了CPU Cache里面的呢？</p>\n<h3 id=\"直接映射Cache\"><a href=\"#直接映射Cache\" class=\"headerlink\" title=\"直接映射Cache\"></a>直接映射Cache</h3><p>我们先以直接映射为例，看看CPU Cache的数据结构和访问逻辑。<br><code>直接映射Cache</code>采用的策略就是把<code>Block（内存块）</code>的地址始终映射在一个<code>Cache Line(缓存块)</code>的地址上，映射关系也简单粗暴的使用<strong>取模运算</strong>。<br>如下图，地址为<strong>7</strong>的<code>Cache Line（缓存块）</code>可以映射地址为<strong>7、15、23、31</strong>的<code>Block（内存块）</code></p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/cpu-cache/%E6%B1%82%E6%A8%A1%E6%98%A0%E5%B0%84%E7%AD%96%E7%95%A5.webp\" alt=\"求模运算策略\"></p>\n<p>我们也能发现，<code>Block</code>和<code>Cache Line</code>是多对一的，这里就需要特定的标识来区别不同的<code>Block</code>，这里特定的标识被称为<code>Tag(组标记)</code>。<code>Tag</code>会记录当前存储的数据对应哪个<code>Block</code>。除了<code>Tag</code>外，Cache Line中还有两个信息：</p>\n<ul>\n<li><code>Data</code>，从内存中实际加载进来的数据。</li>\n<li><code>Valid bit（有效位）</code>，用来标记对应的CPU Line中的数据是否有效，0表示该数据失效，此时CPU会重新访问内存来加载数据。</li>\n</ul>\n<p>CPU在从CPU Cache读取数据的时候，仅会读取<code>Cache Line</code>中一部分数据，这部分数据片段称为<code>Word（字）</code>，怎么在<code>Cache Line</code>中获取<code>Word</code>呢，则需要一个offset（偏移量）。</p>\n<p>因此，一个内存的访问地址，包括<code>Tag（组标记）、CPU Cache地址、Offset（偏移量）</code>这三种信息，靠这三个信息就可以取得CPU想要的数据。</p>\n<p>那么CPU Cache的数据结构就包括<code>地址、Valid bit（有效位）、Tag（组标记）、Data（数据）</code>组成。</p>\n<h3 id=\"全相连Cache\"><a href=\"#全相连Cache\" class=\"headerlink\" title=\"全相连Cache\"></a>全相连Cache</h3><h3 id=\"组相连Cache\"><a href=\"#组相连Cache\" class=\"headerlink\" title=\"组相连Cache\"></a>组相连Cache</h3><h2 id=\"CPU-Cache的数据写入过程\"><a href=\"#CPU-Cache的数据写入过程\" class=\"headerlink\" title=\"CPU Cache的数据写入过程\"></a>CPU Cache的数据写入过程</h2><p>上面我们聊了CPU是怎么从CPU Cache中读数据的，接下来我们聊下CPU是怎么通过CPU Cache写数据的。</p>\n<p>我们知道，<code>CPU Cache</code>的职责是为<code>内存</code>缓冲数据以便供<code>CPU</code>使用的，当CPU想要向<code>内存</code>写入数据的时候，也必须经过CPU Cache这一层，再由CPU Cache把数据同步到内存里，那么同步时机是什么时候呢？下面有两种方式：</p>\n<ul>\n<li>写直达，把数据直接同时写入到内存与Cache中。<ul>\n<li>当CPU Cache中有数据时，更新CPU Cache的数据，再把CPU Cache的数据同步到内存中。</li>\n<li>当CPU Cache没有数据时，直接把数据写入到内存中。</li>\n</ul>\n</li>\n<li>写回</li>\n</ul>\n","site":{"data":{}},"length":1471,"excerpt":"CPU Cache的数据结构与读取过程\nCPU Cache的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为Cache Line (缓存块)。Cache Line对应到内存的那一小块数据称为Block(内存块)。\n可以使用以下命令查看Cache Line的大小:\n\nlinux1\n2\n\n\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size\n64\n\n\n64即64字节，即L1 CPU Cache一次载入的数据大小为64字节。\n比如，有一个int array[100]的数组，当载入array[0]时，也会同时将array[1","more":"<h2 id=\"CPU-Cache的数据结构与读取过程\"><a href=\"#CPU-Cache的数据结构与读取过程\" class=\"headerlink\" title=\"CPU Cache的数据结构与读取过程\"></a>CPU Cache的数据结构与读取过程</h2><p><code>CPU Cache</code>的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为<code>Cache Line</code> (缓存块)。Cache Line对应到内存的那一小块数据称为<code>Block</code>(内存块)。<br>可以使用以下命令查看<code>Cache Line</code>的大小:</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size</span></span><br><span class=\"line\">64</span><br></pre></td></tr></table></figure>\n\n<p>64即64字节，即<code>L1 CPU Cache</code>一次载入的数据大小为64字节。<br>比如，有一个<code>int array[100]</code>的数组，当载入array[0]时，也会同时将array[1]~array[15]载入，作为一个Cache Line存入到CPU Cache中，那么当下次再访问这些元素时，就可以直接在内存中读取了，从而大大提高了CPU读取数据的性能。<br>事实上，CPU读取数据的时候，无论数据是否存放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据后，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从Cache中获取数据，这样的交互方式也满足存储器的层次关系，即每层存储器只与他的上一层和下一层交互。</p>\n<p>那么CPU是怎么知道要访问的内存数据缓存到了CPU Cache里面的呢？</p>\n<h3 id=\"直接映射Cache\"><a href=\"#直接映射Cache\" class=\"headerlink\" title=\"直接映射Cache\"></a>直接映射Cache</h3><p>我们先以直接映射为例，看看CPU Cache的数据结构和访问逻辑。<br><code>直接映射Cache</code>采用的策略就是把<code>Block（内存块）</code>的地址始终映射在一个<code>Cache Line(缓存块)</code>的地址上，映射关系也简单粗暴的使用<strong>取模运算</strong>。<br>如下图，地址为<strong>7</strong>的<code>Cache Line（缓存块）</code>可以映射地址为<strong>7、15、23、31</strong>的<code>Block（内存块）</code></p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/cpu-cache/%E6%B1%82%E6%A8%A1%E6%98%A0%E5%B0%84%E7%AD%96%E7%95%A5.webp\" alt=\"求模运算策略\"></p>\n<p>我们也能发现，<code>Block</code>和<code>Cache Line</code>是多对一的，这里就需要特定的标识来区别不同的<code>Block</code>，这里特定的标识被称为<code>Tag(组标记)</code>。<code>Tag</code>会记录当前存储的数据对应哪个<code>Block</code>。除了<code>Tag</code>外，Cache Line中还有两个信息：</p>\n<ul>\n<li><code>Data</code>，从内存中实际加载进来的数据。</li>\n<li><code>Valid bit（有效位）</code>，用来标记对应的CPU Line中的数据是否有效，0表示该数据失效，此时CPU会重新访问内存来加载数据。</li>\n</ul>\n<p>CPU在从CPU Cache读取数据的时候，仅会读取<code>Cache Line</code>中一部分数据，这部分数据片段称为<code>Word（字）</code>，怎么在<code>Cache Line</code>中获取<code>Word</code>呢，则需要一个offset（偏移量）。</p>\n<p>因此，一个内存的访问地址，包括<code>Tag（组标记）、CPU Cache地址、Offset（偏移量）</code>这三种信息，靠这三个信息就可以取得CPU想要的数据。</p>\n<p>那么CPU Cache的数据结构就包括<code>地址、Valid bit（有效位）、Tag（组标记）、Data（数据）</code>组成。</p>\n<h3 id=\"全相连Cache\"><a href=\"#全相连Cache\" class=\"headerlink\" title=\"全相连Cache\"></a>全相连Cache</h3><h3 id=\"组相连Cache\"><a href=\"#组相连Cache\" class=\"headerlink\" title=\"组相连Cache\"></a>组相连Cache</h3><h2 id=\"CPU-Cache的数据写入过程\"><a href=\"#CPU-Cache的数据写入过程\" class=\"headerlink\" title=\"CPU Cache的数据写入过程\"></a>CPU Cache的数据写入过程</h2><p>上面我们聊了CPU是怎么从CPU Cache中读数据的，接下来我们聊下CPU是怎么通过CPU Cache写数据的。</p>\n<p>我们知道，<code>CPU Cache</code>的职责是为<code>内存</code>缓冲数据以便供<code>CPU</code>使用的，当CPU想要向<code>内存</code>写入数据的时候，也必须经过CPU Cache这一层，再由CPU Cache把数据同步到内存里，那么同步时机是什么时候呢？下面有两种方式：</p>\n<ul>\n<li>写直达，把数据直接同时写入到内存与Cache中。<ul>\n<li>当CPU Cache中有数据时，更新CPU Cache的数据，再把CPU Cache的数据同步到内存中。</li>\n<li>当CPU Cache没有数据时，直接把数据写入到内存中。</li>\n</ul>\n</li>\n<li>写回</li>\n</ul>\n"},{"title":"CPU是怎么运行程序的？","date":"2022-01-23T03:27:37.000Z","description":"你知道`a = 1 + 2`在CPU是怎么执行的吗？","_content":"\n你知道`a = 1 + 2`在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？\n\n## 图灵机的工作方式\n\n要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。\n\n![图灵机](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/how-to-execute-turing.webp)\n\n图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：\n1、在纸上写上或擦除某个符号；\n2、把注意力从纸的一个位置移动到另一个位置。\n而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。\n\n那么我们来看下图灵机是怎么执行`1 + 2`的。\n\n- 首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。\n- 接着，读写头将1写入到存储设备中\n- 读写头移动到下一格，读取2到存储设备中\n- 读写头移动到下一格，读取+，判断加未运算符指令，变将存储设备中的1和2相加，得到3，并将3写入到存储设备中\n- 读写头移动到下一格，将存储设备中的3写入到此格。\n\n现代计算机的工作方式与图灵机执行`1+2`的工作方式基本一致，我们来看下冯诺依曼模型。\n\n## 冯诺依曼模型\n\n冯诺依曼遵循图灵机的设计，使用电子元件构造计算机，约定用二进制进行计算和存储，并定义了*冯诺依曼模型*。\n\n冯诺依曼模型定义了计算机的基本结构有五个部分，**运算器**、**控制器**、 **存储器**、**输入设备**、**输出设备**。\n\n![冯诺依曼模型](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/Von_Neumann_architecture.svg)\n\n计算器、控制器位于CPU中，并使用总线与存储器和输入/输出设备完成交互。\n\n![冯诺依曼模型](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp)\n\n### 寄存器是什么\n看上面的冯诺依曼模型中，CPU中有个寄存器的角色，他是用来干嘛的呢？我们知道CPU中放着控制单元与逻辑运算单元，而数据需要依靠总线与存储单元、输入输出单元交互来获得，依靠总线传输数据会增加运算时间，那么就需要将正在计算的数据存放到寄存器中，通过减少与总线的交互来提升计算速度。根据存储的数据不同，常见的寄存器有以下几种。\n\n- 通用寄存器，存放进行运算的数据。\n- 程序计数器，存放CPU要执行的下一条指令的地址。\n- 指令寄存器，存放程序计数器指向的指令。\n\n### 总线\n总线用于CPU与内存以及其他设备之前的通信。分为以下三种：\n\n- 地址总线，用于指定CPU将要操作的内存地址。\n- 数据总线，用于读写内存的数据。\n- 控制总线，用于发送和接收信号，比如中断、设备复位等。CPU收到信号后自然进行相应，也需要控制总线。\n\n当CPU读写内存时，首先通过**地址总线**来指定内存地址，然后通过**控制总线**来控制读或写命令，最后通过**数据总线**来传输数据。\n\n## 线路位宽与CPU位宽\n\nCPU通过总线与内存进行交互，那么总线是怎么传输数据的呢？其实就是操作电压，低电压为0，高电压为1，以此来表达二进制数据，从而完成数据传输，那么表示一个11010的信号则需要5条线路并行传输，线路的条数称为位宽，一般也对应CPU位宽。\n\nCPU想要操作内存地址就需要地址总线。\n\n假设有线路位宽为5，此时CPU想访问内存地址6，那么则通过地址总线传输00110即可，如果此时CPU想访问128，那么传输啥都没用，位宽为5，寻址范围只能在0-31上，可见，位宽决定了CPU能操作的内存大小，32位CPU只能操作`2^32`(4G)大的内存。\n\n{% note %}所以不要给32位CPU安装8G内存条哦，4G就够了{% endnote %}\n\n线路位宽决定了数据传输的能力，那么CPU位宽呢？\n\n看冯诺依曼模型可知，CPU放着控制单元与逻辑运算单元，CPU位宽决定了这里的计算能力，32位的CPU没法直接加和两个64位大小的数字，需要分高低位加和再组装，而64位计算机则可以直接对64位数字加和，那么CPU位宽则决定了一次能计算多少字节的数据。\n\n- 32位CPU一次可以计算4个字节；\n- 64位CPU一次可以计算8个字节；\n\n{% note %}如果计算的数额不超过32位，此时32位CPU与64位CPU其实没差别{% endnote %}\n\n## 程序执行的基本过程\n\n程序实际上是一条条指令，所以程序的运行过程就是把每一条指令一步步的执行起来，负责执行指令的就是CPU。\n\n![程序执行的基本过程](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/CPU%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F.webp)\n\n1. CPU读取**程序计数器**的值，该值即为指令的内存地址，然后**控制单元**操作**地址总线**指定需要访问的内存地址，接着通知内存准备数据，数据准备好后通过**数据总线**传输给CPU，CPU收到数据后将该指令存放到**指令寄存器**。\n\n2. CPU分析指令寄存器中的指令，确定指令的类型以及参数，若是计算类型，则交由**逻辑运算单元**，若是存储类型，则交由**控制单元**。\n\n3. 当该指令执行完成后，**程序计数器**自增，自增大小有位宽决定，如果是32位宽，则自增4。\n\n以上过程不断循环，程序便跑起来了，这个循环过程成为**CPU的指令周期**。\n\n## a = 1 + 2执行具体过程\n\nCPU可不认识什么a = 1 + 2，想要程序跑起来，首先要将其翻译成汇编语言，此过程称为汇编代码。\n\n针对汇编代码，我们还需要用汇编器翻译成机器码，即01000101011这样的机器语言，此时才可以交由CPU完成执行。\n\n汇编分为`数据段`与`指令段`，分别存放数据与指令。\n\n![数据段与正文段](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n编译器会把`a = 1 + 2`翻译成4条指令，存放到正文段中。如图，这 4 条指令被存放到了 0x200 ~ 0x20c 的区域中：\n\n- 0x200 的内容是 load 指令将 0x100 地址中的数据 1 装入到寄存器 R0；\n- 0x204 的内容是 load 指令将 0x104 地址中的数据 2 装入到寄存器 R1；\n- 0x208 的内容是 add 指令将寄存器 R0 和 R1 的数据相加，并把结果存放到寄存器 R2；\n- 0x20c 的内容是 store 指令将寄存器 R2 中的数据存回数据段中的 0x108 地址中，这个地址也就是变量 a 内存中的地址；\n\n## 指令\n\n编译期在编译程序时，会构造指令，这个过程成为指令的编码。CPU执行程序时，就会解析指令，这个过程称为指令的解码。\n\n现代CPU使用流水线方式执行指令，流水线方式将一条指令拆成四个阶段，如下图：\n\n![流水线执行模式](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n1. **Fetch** -> CPU通过程序计数器读取对应的内存地址的指令（获取指令）\n\n2. **Decode** -> CPU对指令进行解码（指令译码）\n\n3. **Execution** -> CPU执行指令（执行指令）\n\n4. **Store** -> 将计算结果存回到寄存器或者将寄存器的值存回内存（数据回写）\n\n上面4个阶段，称为**指令周期**，CPU的工作就是一个接着一个执行，周而复始，事实上，不同的阶段有计算机的不同组件完成：\n\n![指令周期](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n- 取指令的阶段，我们的指令是存放在**存储器**里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由**控制器**操作的；\n- 指令的译码过程，也是由**控制器**进行的；\n- 指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由**算术逻辑单元操作**的，也就是由**运算器**处理的。但是如果是一个简单的无条件地址跳转，则是直接在**控制器**里面完成的，不需要用到运算器。\n\n### 指令的类型\n\n指令从功能角度划分，可以分为 5 大类：\n\n- 数据传输类型的指令，比如 `store/load` 是寄存器与内存间数据传输的指令，`mov` 是将一个内存地址的数据移动到另一个内存地址的指令；\n- 运算类型的指令，比如加减乘除、位运算、比较大小等等，它们最多只能处理两个寄存器中的数据；\n- 跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的 `if-else`、`swtich-case`、函数调用等。\n- 信号类型的指令，比如发生中断的指令 `trap`；\n- 闲置类型的指令，比如指令 `nop`，执行后 CPU 会空转一个周期","source":"_posts/how-cpu-execute.md","raw":"---\ntitle: CPU是怎么运行程序的？\ndate: 2022-01-23 11:27:37\ntags: [操作系统, CPU]\ndescription: 你知道`a = 1 + 2`在CPU是怎么执行的吗？\n---\n\n你知道`a = 1 + 2`在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？\n\n## 图灵机的工作方式\n\n要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。\n\n![图灵机](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/how-to-execute-turing.webp)\n\n图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：\n1、在纸上写上或擦除某个符号；\n2、把注意力从纸的一个位置移动到另一个位置。\n而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。\n\n那么我们来看下图灵机是怎么执行`1 + 2`的。\n\n- 首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。\n- 接着，读写头将1写入到存储设备中\n- 读写头移动到下一格，读取2到存储设备中\n- 读写头移动到下一格，读取+，判断加未运算符指令，变将存储设备中的1和2相加，得到3，并将3写入到存储设备中\n- 读写头移动到下一格，将存储设备中的3写入到此格。\n\n现代计算机的工作方式与图灵机执行`1+2`的工作方式基本一致，我们来看下冯诺依曼模型。\n\n## 冯诺依曼模型\n\n冯诺依曼遵循图灵机的设计，使用电子元件构造计算机，约定用二进制进行计算和存储，并定义了*冯诺依曼模型*。\n\n冯诺依曼模型定义了计算机的基本结构有五个部分，**运算器**、**控制器**、 **存储器**、**输入设备**、**输出设备**。\n\n![冯诺依曼模型](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/Von_Neumann_architecture.svg)\n\n计算器、控制器位于CPU中，并使用总线与存储器和输入/输出设备完成交互。\n\n![冯诺依曼模型](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp)\n\n### 寄存器是什么\n看上面的冯诺依曼模型中，CPU中有个寄存器的角色，他是用来干嘛的呢？我们知道CPU中放着控制单元与逻辑运算单元，而数据需要依靠总线与存储单元、输入输出单元交互来获得，依靠总线传输数据会增加运算时间，那么就需要将正在计算的数据存放到寄存器中，通过减少与总线的交互来提升计算速度。根据存储的数据不同，常见的寄存器有以下几种。\n\n- 通用寄存器，存放进行运算的数据。\n- 程序计数器，存放CPU要执行的下一条指令的地址。\n- 指令寄存器，存放程序计数器指向的指令。\n\n### 总线\n总线用于CPU与内存以及其他设备之前的通信。分为以下三种：\n\n- 地址总线，用于指定CPU将要操作的内存地址。\n- 数据总线，用于读写内存的数据。\n- 控制总线，用于发送和接收信号，比如中断、设备复位等。CPU收到信号后自然进行相应，也需要控制总线。\n\n当CPU读写内存时，首先通过**地址总线**来指定内存地址，然后通过**控制总线**来控制读或写命令，最后通过**数据总线**来传输数据。\n\n## 线路位宽与CPU位宽\n\nCPU通过总线与内存进行交互，那么总线是怎么传输数据的呢？其实就是操作电压，低电压为0，高电压为1，以此来表达二进制数据，从而完成数据传输，那么表示一个11010的信号则需要5条线路并行传输，线路的条数称为位宽，一般也对应CPU位宽。\n\nCPU想要操作内存地址就需要地址总线。\n\n假设有线路位宽为5，此时CPU想访问内存地址6，那么则通过地址总线传输00110即可，如果此时CPU想访问128，那么传输啥都没用，位宽为5，寻址范围只能在0-31上，可见，位宽决定了CPU能操作的内存大小，32位CPU只能操作`2^32`(4G)大的内存。\n\n{% note %}所以不要给32位CPU安装8G内存条哦，4G就够了{% endnote %}\n\n线路位宽决定了数据传输的能力，那么CPU位宽呢？\n\n看冯诺依曼模型可知，CPU放着控制单元与逻辑运算单元，CPU位宽决定了这里的计算能力，32位的CPU没法直接加和两个64位大小的数字，需要分高低位加和再组装，而64位计算机则可以直接对64位数字加和，那么CPU位宽则决定了一次能计算多少字节的数据。\n\n- 32位CPU一次可以计算4个字节；\n- 64位CPU一次可以计算8个字节；\n\n{% note %}如果计算的数额不超过32位，此时32位CPU与64位CPU其实没差别{% endnote %}\n\n## 程序执行的基本过程\n\n程序实际上是一条条指令，所以程序的运行过程就是把每一条指令一步步的执行起来，负责执行指令的就是CPU。\n\n![程序执行的基本过程](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/CPU%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F.webp)\n\n1. CPU读取**程序计数器**的值，该值即为指令的内存地址，然后**控制单元**操作**地址总线**指定需要访问的内存地址，接着通知内存准备数据，数据准备好后通过**数据总线**传输给CPU，CPU收到数据后将该指令存放到**指令寄存器**。\n\n2. CPU分析指令寄存器中的指令，确定指令的类型以及参数，若是计算类型，则交由**逻辑运算单元**，若是存储类型，则交由**控制单元**。\n\n3. 当该指令执行完成后，**程序计数器**自增，自增大小有位宽决定，如果是32位宽，则自增4。\n\n以上过程不断循环，程序便跑起来了，这个循环过程成为**CPU的指令周期**。\n\n## a = 1 + 2执行具体过程\n\nCPU可不认识什么a = 1 + 2，想要程序跑起来，首先要将其翻译成汇编语言，此过程称为汇编代码。\n\n针对汇编代码，我们还需要用汇编器翻译成机器码，即01000101011这样的机器语言，此时才可以交由CPU完成执行。\n\n汇编分为`数据段`与`指令段`，分别存放数据与指令。\n\n![数据段与正文段](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n编译器会把`a = 1 + 2`翻译成4条指令，存放到正文段中。如图，这 4 条指令被存放到了 0x200 ~ 0x20c 的区域中：\n\n- 0x200 的内容是 load 指令将 0x100 地址中的数据 1 装入到寄存器 R0；\n- 0x204 的内容是 load 指令将 0x104 地址中的数据 2 装入到寄存器 R1；\n- 0x208 的内容是 add 指令将寄存器 R0 和 R1 的数据相加，并把结果存放到寄存器 R2；\n- 0x20c 的内容是 store 指令将寄存器 R2 中的数据存回数据段中的 0x108 地址中，这个地址也就是变量 a 内存中的地址；\n\n## 指令\n\n编译期在编译程序时，会构造指令，这个过程成为指令的编码。CPU执行程序时，就会解析指令，这个过程称为指令的解码。\n\n现代CPU使用流水线方式执行指令，流水线方式将一条指令拆成四个阶段，如下图：\n\n![流水线执行模式](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n1. **Fetch** -> CPU通过程序计数器读取对应的内存地址的指令（获取指令）\n\n2. **Decode** -> CPU对指令进行解码（指令译码）\n\n3. **Execution** -> CPU执行指令（执行指令）\n\n4. **Store** -> 将计算结果存回到寄存器或者将寄存器的值存回内存（数据回写）\n\n上面4个阶段，称为**指令周期**，CPU的工作就是一个接着一个执行，周而复始，事实上，不同的阶段有计算机的不同组件完成：\n\n![指令周期](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp)\n\n- 取指令的阶段，我们的指令是存放在**存储器**里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由**控制器**操作的；\n- 指令的译码过程，也是由**控制器**进行的；\n- 指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由**算术逻辑单元操作**的，也就是由**运算器**处理的。但是如果是一个简单的无条件地址跳转，则是直接在**控制器**里面完成的，不需要用到运算器。\n\n### 指令的类型\n\n指令从功能角度划分，可以分为 5 大类：\n\n- 数据传输类型的指令，比如 `store/load` 是寄存器与内存间数据传输的指令，`mov` 是将一个内存地址的数据移动到另一个内存地址的指令；\n- 运算类型的指令，比如加减乘除、位运算、比较大小等等，它们最多只能处理两个寄存器中的数据；\n- 跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的 `if-else`、`swtich-case`、函数调用等。\n- 信号类型的指令，比如发生中断的指令 `trap`；\n- 闲置类型的指令，比如指令 `nop`，执行后 CPU 会空转一个周期","slug":"how-cpu-execute","published":1,"updated":"2022-01-23T03:27:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54ro3t00003n5q768yv1ldv","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>你知道<code>a = 1 + 2</code>在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？</p>\n<h2 id=\"图灵机的工作方式\"><a href=\"#图灵机的工作方式\" class=\"headerlink\" title=\"图灵机的工作方式\"></a>图灵机的工作方式</h2><p>要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/how-to-execute-turing.webp\" alt=\"图灵机\"></p>\n<p>图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：<br>1、在纸上写上或擦除某个符号；<br>2、把注意力从纸的一个位置移动到另一个位置。<br>而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。</p>\n<p>那么我们来看下图灵机是怎么执行<code>1 + 2</code>的。</p>\n<ul>\n<li>首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。</li>\n<li>接着，读写头将1写入到存储设备中</li>\n<li>读写头移动到下一格，读取2到存储设备中</li>\n<li>读写头移动到下一格，读取+，判断加未运算符指令，变将存储设备中的1和2相加，得到3，并将3写入到存储设备中</li>\n<li>读写头移动到下一格，将存储设备中的3写入到此格。</li>\n</ul>\n<p>现代计算机的工作方式与图灵机执行<code>1+2</code>的工作方式基本一致，我们来看下冯诺依曼模型。</p>\n<h2 id=\"冯诺依曼模型\"><a href=\"#冯诺依曼模型\" class=\"headerlink\" title=\"冯诺依曼模型\"></a>冯诺依曼模型</h2><p>冯诺依曼遵循图灵机的设计，使用电子元件构造计算机，约定用二进制进行计算和存储，并定义了<em>冯诺依曼模型</em>。</p>\n<p>冯诺依曼模型定义了计算机的基本结构有五个部分，<strong>运算器</strong>、<strong>控制器</strong>、 <strong>存储器</strong>、<strong>输入设备</strong>、<strong>输出设备</strong>。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/Von_Neumann_architecture.svg\" alt=\"冯诺依曼模型\"></p>\n<p>计算器、控制器位于CPU中，并使用总线与存储器和输入/输出设备完成交互。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp\" alt=\"冯诺依曼模型\"></p>\n<h3 id=\"寄存器是什么\"><a href=\"#寄存器是什么\" class=\"headerlink\" title=\"寄存器是什么\"></a>寄存器是什么</h3><p>看上面的冯诺依曼模型中，CPU中有个寄存器的角色，他是用来干嘛的呢？我们知道CPU中放着控制单元与逻辑运算单元，而数据需要依靠总线与存储单元、输入输出单元交互来获得，依靠总线传输数据会增加运算时间，那么就需要将正在计算的数据存放到寄存器中，通过减少与总线的交互来提升计算速度。根据存储的数据不同，常见的寄存器有以下几种。</p>\n<ul>\n<li>通用寄存器，存放进行运算的数据。</li>\n<li>程序计数器，存放CPU要执行的下一条指令的地址。</li>\n<li>指令寄存器，存放程序计数器指向的指令。</li>\n</ul>\n<h3 id=\"总线\"><a href=\"#总线\" class=\"headerlink\" title=\"总线\"></a>总线</h3><p>总线用于CPU与内存以及其他设备之前的通信。分为以下三种：</p>\n<ul>\n<li>地址总线，用于指定CPU将要操作的内存地址。</li>\n<li>数据总线，用于读写内存的数据。</li>\n<li>控制总线，用于发送和接收信号，比如中断、设备复位等。CPU收到信号后自然进行相应，也需要控制总线。</li>\n</ul>\n<p>当CPU读写内存时，首先通过<strong>地址总线</strong>来指定内存地址，然后通过<strong>控制总线</strong>来控制读或写命令，最后通过<strong>数据总线</strong>来传输数据。</p>\n<h2 id=\"线路位宽与CPU位宽\"><a href=\"#线路位宽与CPU位宽\" class=\"headerlink\" title=\"线路位宽与CPU位宽\"></a>线路位宽与CPU位宽</h2><p>CPU通过总线与内存进行交互，那么总线是怎么传输数据的呢？其实就是操作电压，低电压为0，高电压为1，以此来表达二进制数据，从而完成数据传输，那么表示一个11010的信号则需要5条线路并行传输，线路的条数称为位宽，一般也对应CPU位宽。</p>\n<p>CPU想要操作内存地址就需要地址总线。</p>\n<p>假设有线路位宽为5，此时CPU想访问内存地址6，那么则通过地址总线传输00110即可，如果此时CPU想访问128，那么传输啥都没用，位宽为5，寻址范围只能在0-31上，可见，位宽决定了CPU能操作的内存大小，32位CPU只能操作<code>2^32</code>(4G)大的内存。</p>\n<div class=\"note \">\n            <p>所以不要给32位CPU安装8G内存条哦，4G就够了</p>\n          </div>\n\n<p>线路位宽决定了数据传输的能力，那么CPU位宽呢？</p>\n<p>看冯诺依曼模型可知，CPU放着控制单元与逻辑运算单元，CPU位宽决定了这里的计算能力，32位的CPU没法直接加和两个64位大小的数字，需要分高低位加和再组装，而64位计算机则可以直接对64位数字加和，那么CPU位宽则决定了一次能计算多少字节的数据。</p>\n<ul>\n<li>32位CPU一次可以计算4个字节；</li>\n<li>64位CPU一次可以计算8个字节；</li>\n</ul>\n<div class=\"note \">\n            <p>如果计算的数额不超过32位，此时32位CPU与64位CPU其实没差别</p>\n          </div>\n\n<h2 id=\"程序执行的基本过程\"><a href=\"#程序执行的基本过程\" class=\"headerlink\" title=\"程序执行的基本过程\"></a>程序执行的基本过程</h2><p>程序实际上是一条条指令，所以程序的运行过程就是把每一条指令一步步的执行起来，负责执行指令的就是CPU。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/CPU%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F.webp\" alt=\"程序执行的基本过程\"></p>\n<ol>\n<li><p>CPU读取<strong>程序计数器</strong>的值，该值即为指令的内存地址，然后<strong>控制单元</strong>操作<strong>地址总线</strong>指定需要访问的内存地址，接着通知内存准备数据，数据准备好后通过<strong>数据总线</strong>传输给CPU，CPU收到数据后将该指令存放到<strong>指令寄存器</strong>。</p>\n</li>\n<li><p>CPU分析指令寄存器中的指令，确定指令的类型以及参数，若是计算类型，则交由<strong>逻辑运算单元</strong>，若是存储类型，则交由<strong>控制单元</strong>。</p>\n</li>\n<li><p>当该指令执行完成后，<strong>程序计数器</strong>自增，自增大小有位宽决定，如果是32位宽，则自增4。</p>\n</li>\n</ol>\n<p>以上过程不断循环，程序便跑起来了，这个循环过程成为<strong>CPU的指令周期</strong>。</p>\n<h2 id=\"a-1-2执行具体过程\"><a href=\"#a-1-2执行具体过程\" class=\"headerlink\" title=\"a = 1 + 2执行具体过程\"></a>a = 1 + 2执行具体过程</h2><p>CPU可不认识什么a = 1 + 2，想要程序跑起来，首先要将其翻译成汇编语言，此过程称为汇编代码。</p>\n<p>针对汇编代码，我们还需要用汇编器翻译成机器码，即01000101011这样的机器语言，此时才可以交由CPU完成执行。</p>\n<p>汇编分为<code>数据段</code>与<code>指令段</code>，分别存放数据与指令。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"数据段与正文段\"></p>\n<p>编译器会把<code>a = 1 + 2</code>翻译成4条指令，存放到正文段中。如图，这 4 条指令被存放到了 0x200 ~ 0x20c 的区域中：</p>\n<ul>\n<li>0x200 的内容是 load 指令将 0x100 地址中的数据 1 装入到寄存器 R0；</li>\n<li>0x204 的内容是 load 指令将 0x104 地址中的数据 2 装入到寄存器 R1；</li>\n<li>0x208 的内容是 add 指令将寄存器 R0 和 R1 的数据相加，并把结果存放到寄存器 R2；</li>\n<li>0x20c 的内容是 store 指令将寄存器 R2 中的数据存回数据段中的 0x108 地址中，这个地址也就是变量 a 内存中的地址；</li>\n</ul>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>编译期在编译程序时，会构造指令，这个过程成为指令的编码。CPU执行程序时，就会解析指令，这个过程称为指令的解码。</p>\n<p>现代CPU使用流水线方式执行指令，流水线方式将一条指令拆成四个阶段，如下图：</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"流水线执行模式\"></p>\n<ol>\n<li><p><strong>Fetch</strong> -&gt; CPU通过程序计数器读取对应的内存地址的指令（获取指令）</p>\n</li>\n<li><p><strong>Decode</strong> -&gt; CPU对指令进行解码（指令译码）</p>\n</li>\n<li><p><strong>Execution</strong> -&gt; CPU执行指令（执行指令）</p>\n</li>\n<li><p><strong>Store</strong> -&gt; 将计算结果存回到寄存器或者将寄存器的值存回内存（数据回写）</p>\n</li>\n</ol>\n<p>上面4个阶段，称为<strong>指令周期</strong>，CPU的工作就是一个接着一个执行，周而复始，事实上，不同的阶段有计算机的不同组件完成：</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"指令周期\"></p>\n<ul>\n<li>取指令的阶段，我们的指令是存放在<strong>存储器</strong>里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由<strong>控制器</strong>操作的；</li>\n<li>指令的译码过程，也是由<strong>控制器</strong>进行的；</li>\n<li>指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由<strong>算术逻辑单元操作</strong>的，也就是由<strong>运算器</strong>处理的。但是如果是一个简单的无条件地址跳转，则是直接在<strong>控制器</strong>里面完成的，不需要用到运算器。</li>\n</ul>\n<h3 id=\"指令的类型\"><a href=\"#指令的类型\" class=\"headerlink\" title=\"指令的类型\"></a>指令的类型</h3><p>指令从功能角度划分，可以分为 5 大类：</p>\n<ul>\n<li>数据传输类型的指令，比如 <code>store/load</code> 是寄存器与内存间数据传输的指令，<code>mov</code> 是将一个内存地址的数据移动到另一个内存地址的指令；</li>\n<li>运算类型的指令，比如加减乘除、位运算、比较大小等等，它们最多只能处理两个寄存器中的数据；</li>\n<li>跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的 <code>if-else</code>、<code>swtich-case</code>、函数调用等。</li>\n<li>信号类型的指令，比如发生中断的指令 <code>trap</code>；</li>\n<li>闲置类型的指令，比如指令 <code>nop</code>，执行后 CPU 会空转一个周期</li>\n</ul>\n","site":{"data":{}},"length":2871,"excerpt":"你知道a = 1 + 2在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？\n\n图灵机的工作方式\n要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。\n\n\n\n图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：\n1、在纸上写上或擦除某个符号；\n2、把注意力从纸的一个位置移动到另一个位置。\n而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。\n\n那么我们来看下图灵机是怎么执行1 + 2的。\n\n * 首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。\n * 接着，读写头将1写入到存储设备中\n * 读写头移动","more":"<p>你知道<code>a = 1 + 2</code>在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？</p>\n<h2 id=\"图灵机的工作方式\"><a href=\"#图灵机的工作方式\" class=\"headerlink\" title=\"图灵机的工作方式\"></a>图灵机的工作方式</h2><p>要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/how-to-execute-turing.webp\" alt=\"图灵机\"></p>\n<p>图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：<br>1、在纸上写上或擦除某个符号；<br>2、把注意力从纸的一个位置移动到另一个位置。<br>而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。</p>\n<p>那么我们来看下图灵机是怎么执行<code>1 + 2</code>的。</p>\n<ul>\n<li>首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。</li>\n<li>接着，读写头将1写入到存储设备中</li>\n<li>读写头移动到下一格，读取2到存储设备中</li>\n<li>读写头移动到下一格，读取+，判断加未运算符指令，变将存储设备中的1和2相加，得到3，并将3写入到存储设备中</li>\n<li>读写头移动到下一格，将存储设备中的3写入到此格。</li>\n</ul>\n<p>现代计算机的工作方式与图灵机执行<code>1+2</code>的工作方式基本一致，我们来看下冯诺依曼模型。</p>\n<h2 id=\"冯诺依曼模型\"><a href=\"#冯诺依曼模型\" class=\"headerlink\" title=\"冯诺依曼模型\"></a>冯诺依曼模型</h2><p>冯诺依曼遵循图灵机的设计，使用电子元件构造计算机，约定用二进制进行计算和存储，并定义了<em>冯诺依曼模型</em>。</p>\n<p>冯诺依曼模型定义了计算机的基本结构有五个部分，<strong>运算器</strong>、<strong>控制器</strong>、 <strong>存储器</strong>、<strong>输入设备</strong>、<strong>输出设备</strong>。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/Von_Neumann_architecture.svg\" alt=\"冯诺依曼模型\"></p>\n<p>计算器、控制器位于CPU中，并使用总线与存储器和输入/输出设备完成交互。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp\" alt=\"冯诺依曼模型\"></p>\n<h3 id=\"寄存器是什么\"><a href=\"#寄存器是什么\" class=\"headerlink\" title=\"寄存器是什么\"></a>寄存器是什么</h3><p>看上面的冯诺依曼模型中，CPU中有个寄存器的角色，他是用来干嘛的呢？我们知道CPU中放着控制单元与逻辑运算单元，而数据需要依靠总线与存储单元、输入输出单元交互来获得，依靠总线传输数据会增加运算时间，那么就需要将正在计算的数据存放到寄存器中，通过减少与总线的交互来提升计算速度。根据存储的数据不同，常见的寄存器有以下几种。</p>\n<ul>\n<li>通用寄存器，存放进行运算的数据。</li>\n<li>程序计数器，存放CPU要执行的下一条指令的地址。</li>\n<li>指令寄存器，存放程序计数器指向的指令。</li>\n</ul>\n<h3 id=\"总线\"><a href=\"#总线\" class=\"headerlink\" title=\"总线\"></a>总线</h3><p>总线用于CPU与内存以及其他设备之前的通信。分为以下三种：</p>\n<ul>\n<li>地址总线，用于指定CPU将要操作的内存地址。</li>\n<li>数据总线，用于读写内存的数据。</li>\n<li>控制总线，用于发送和接收信号，比如中断、设备复位等。CPU收到信号后自然进行相应，也需要控制总线。</li>\n</ul>\n<p>当CPU读写内存时，首先通过<strong>地址总线</strong>来指定内存地址，然后通过<strong>控制总线</strong>来控制读或写命令，最后通过<strong>数据总线</strong>来传输数据。</p>\n<h2 id=\"线路位宽与CPU位宽\"><a href=\"#线路位宽与CPU位宽\" class=\"headerlink\" title=\"线路位宽与CPU位宽\"></a>线路位宽与CPU位宽</h2><p>CPU通过总线与内存进行交互，那么总线是怎么传输数据的呢？其实就是操作电压，低电压为0，高电压为1，以此来表达二进制数据，从而完成数据传输，那么表示一个11010的信号则需要5条线路并行传输，线路的条数称为位宽，一般也对应CPU位宽。</p>\n<p>CPU想要操作内存地址就需要地址总线。</p>\n<p>假设有线路位宽为5，此时CPU想访问内存地址6，那么则通过地址总线传输00110即可，如果此时CPU想访问128，那么传输啥都没用，位宽为5，寻址范围只能在0-31上，可见，位宽决定了CPU能操作的内存大小，32位CPU只能操作<code>2^32</code>(4G)大的内存。</p>\n<div class=\"note \">\n            <p>所以不要给32位CPU安装8G内存条哦，4G就够了</p>\n          </div>\n\n<p>线路位宽决定了数据传输的能力，那么CPU位宽呢？</p>\n<p>看冯诺依曼模型可知，CPU放着控制单元与逻辑运算单元，CPU位宽决定了这里的计算能力，32位的CPU没法直接加和两个64位大小的数字，需要分高低位加和再组装，而64位计算机则可以直接对64位数字加和，那么CPU位宽则决定了一次能计算多少字节的数据。</p>\n<ul>\n<li>32位CPU一次可以计算4个字节；</li>\n<li>64位CPU一次可以计算8个字节；</li>\n</ul>\n<div class=\"note \">\n            <p>如果计算的数额不超过32位，此时32位CPU与64位CPU其实没差别</p>\n          </div>\n\n<h2 id=\"程序执行的基本过程\"><a href=\"#程序执行的基本过程\" class=\"headerlink\" title=\"程序执行的基本过程\"></a>程序执行的基本过程</h2><p>程序实际上是一条条指令，所以程序的运行过程就是把每一条指令一步步的执行起来，负责执行指令的就是CPU。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/CPU%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F.webp\" alt=\"程序执行的基本过程\"></p>\n<ol>\n<li><p>CPU读取<strong>程序计数器</strong>的值，该值即为指令的内存地址，然后<strong>控制单元</strong>操作<strong>地址总线</strong>指定需要访问的内存地址，接着通知内存准备数据，数据准备好后通过<strong>数据总线</strong>传输给CPU，CPU收到数据后将该指令存放到<strong>指令寄存器</strong>。</p>\n</li>\n<li><p>CPU分析指令寄存器中的指令，确定指令的类型以及参数，若是计算类型，则交由<strong>逻辑运算单元</strong>，若是存储类型，则交由<strong>控制单元</strong>。</p>\n</li>\n<li><p>当该指令执行完成后，<strong>程序计数器</strong>自增，自增大小有位宽决定，如果是32位宽，则自增4。</p>\n</li>\n</ol>\n<p>以上过程不断循环，程序便跑起来了，这个循环过程成为<strong>CPU的指令周期</strong>。</p>\n<h2 id=\"a-1-2执行具体过程\"><a href=\"#a-1-2执行具体过程\" class=\"headerlink\" title=\"a = 1 + 2执行具体过程\"></a>a = 1 + 2执行具体过程</h2><p>CPU可不认识什么a = 1 + 2，想要程序跑起来，首先要将其翻译成汇编语言，此过程称为汇编代码。</p>\n<p>针对汇编代码，我们还需要用汇编器翻译成机器码，即01000101011这样的机器语言，此时才可以交由CPU完成执行。</p>\n<p>汇编分为<code>数据段</code>与<code>指令段</code>，分别存放数据与指令。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"数据段与正文段\"></p>\n<p>编译器会把<code>a = 1 + 2</code>翻译成4条指令，存放到正文段中。如图，这 4 条指令被存放到了 0x200 ~ 0x20c 的区域中：</p>\n<ul>\n<li>0x200 的内容是 load 指令将 0x100 地址中的数据 1 装入到寄存器 R0；</li>\n<li>0x204 的内容是 load 指令将 0x104 地址中的数据 2 装入到寄存器 R1；</li>\n<li>0x208 的内容是 add 指令将寄存器 R0 和 R1 的数据相加，并把结果存放到寄存器 R2；</li>\n<li>0x20c 的内容是 store 指令将寄存器 R2 中的数据存回数据段中的 0x108 地址中，这个地址也就是变量 a 内存中的地址；</li>\n</ul>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>编译期在编译程序时，会构造指令，这个过程成为指令的编码。CPU执行程序时，就会解析指令，这个过程称为指令的解码。</p>\n<p>现代CPU使用流水线方式执行指令，流水线方式将一条指令拆成四个阶段，如下图：</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"流水线执行模式\"></p>\n<ol>\n<li><p><strong>Fetch</strong> -&gt; CPU通过程序计数器读取对应的内存地址的指令（获取指令）</p>\n</li>\n<li><p><strong>Decode</strong> -&gt; CPU对指令进行解码（指令译码）</p>\n</li>\n<li><p><strong>Execution</strong> -&gt; CPU执行指令（执行指令）</p>\n</li>\n<li><p><strong>Store</strong> -&gt; 将计算结果存回到寄存器或者将寄存器的值存回内存（数据回写）</p>\n</li>\n</ol>\n<p>上面4个阶段，称为<strong>指令周期</strong>，CPU的工作就是一个接着一个执行，周而复始，事实上，不同的阶段有计算机的不同组件完成：</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp\" alt=\"指令周期\"></p>\n<ul>\n<li>取指令的阶段，我们的指令是存放在<strong>存储器</strong>里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由<strong>控制器</strong>操作的；</li>\n<li>指令的译码过程，也是由<strong>控制器</strong>进行的；</li>\n<li>指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由<strong>算术逻辑单元操作</strong>的，也就是由<strong>运算器</strong>处理的。但是如果是一个简单的无条件地址跳转，则是直接在<strong>控制器</strong>里面完成的，不需要用到运算器。</li>\n</ul>\n<h3 id=\"指令的类型\"><a href=\"#指令的类型\" class=\"headerlink\" title=\"指令的类型\"></a>指令的类型</h3><p>指令从功能角度划分，可以分为 5 大类：</p>\n<ul>\n<li>数据传输类型的指令，比如 <code>store/load</code> 是寄存器与内存间数据传输的指令，<code>mov</code> 是将一个内存地址的数据移动到另一个内存地址的指令；</li>\n<li>运算类型的指令，比如加减乘除、位运算、比较大小等等，它们最多只能处理两个寄存器中的数据；</li>\n<li>跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的 <code>if-else</code>、<code>swtich-case</code>、函数调用等。</li>\n<li>信号类型的指令，比如发生中断的指令 <code>trap</code>；</li>\n<li>闲置类型的指令，比如指令 <code>nop</code>，执行后 CPU 会空转一个周期</li>\n</ul>\n"},{"title":"Hello World","date":"2021-12-30T16:00:00.000Z","_content":"\n一切的起源都要从\"Hello World\"开始...","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-12-31\n---\n\n一切的起源都要从\"Hello World\"开始...","slug":"hello-world","published":1,"updated":"2021-12-30T16:00:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54ro3t40006n5q78kmr7i85","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>一切的起源都要从”Hello World”开始…</p>\n","site":{"data":{}},"length":23,"excerpt":"一切的起源都要从”Hello World”开始…","more":"<p>一切的起源都要从”Hello World”开始…</p>\n"},{"title":"Hexo博客写作技巧","date":"2022-01-03T13:12:48.000Z","description":"本文介绍Hexo博客的写作技巧。","_content":"\n## Markdown基本语法\n\nMarkdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。\n\n| 元素     | Markdown语法                              | 效果预览                                               |\n| :--------: | :-----------------------------------------: | :-------------- |\n| 标题     | `# 标题1`<br>`## h2`<br>`### h3`          | <div style=\"font-weight: bold\"><div style=\"font-size: 24px\">标题一</div><div style=\"font-size: 22px\">标题二</div><div style=\"font-size: 20px\">标题三</div></div>  |\n| 加粗     | `**文字加粗**`                            | **文字加粗**                                           |\n| 引用     | `> 引用文字`                              | <blockquote>引用文字</blockquote>                      |\n| 有序列表 | `1. 第一项`<br>`2. 第二项`<br>`3. 第三项` | <ol><li>第一项</li><li>第二项</li><li>第三项</li></ol> |\n| 无序列表 | `- 第一项`<br>`- 第二项`<br>`- 第三项`    | <ul><li>第一项</li><li>第二项</li><li>第三项</li></ul> |\n| 链接     | `[链接](url)`         | [链接](url)                        |\n| 图片     | `![图片](image.jpg)`                      |          <i class=\"fa fa-image\"></i>                                             |\n| 水平线   | `---`                                     | <hr>                                                   |\n| 代码     | <code>\\`code\\`</code>                     | `code`                                                 |\n| 代码块     | <code>\\`\\`\\`code snippet\\`\\`\\`</code>                     |              <figure class=\"highlight\"><table><tbody><tr><td class=\"code\"><pre>code snippet</pre></td></tr></tbody></table></figure>                                   |\n\n{% note info %}\n更多语法请参考 [基础语法 | Markdown Guide](https://www.markdownguide.org/basic-syntax) 和 [扩展语法 | Markdown Guide](https://www.markdownguide.org/extended-syntax)\n{% endnote %}\n\n## Hexo内置标签\n\nMarkdown满足了最基本的文档编写需求，`标签(Tag Plugin)`是Hexo提供的一种快速生成特定内容的方式，用来提供更多样式和功能，例如，标准的Markdown语法中，我们无法制定图片的大小，这是我们可以使用`标签`来解决。值得一提的是，`标签(Tag Plugin)`有Plugin的属性，你可以自主编写独特的标签来满足你的需求。\n\n### 1.文本居中的引用\n\n{% centerquote %} 看，`centerquote`是这样的，俺觉得这个用处不大{% endcenterquote %}\n\n```html 标签语法\n<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<!-- 其中 class=\"blockquote-center\" 是必须的 -->\n<blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n\n<!-- 标签方式 -->\n{% centerquote %}blah blah blah{% endcenterquote %}\n\n<!-- 标签别名 -->\n{% cq %} blah blah blah {% endcq %}\n```\n\n### 2.代码块的进阶用法\n\n```yml _config.xml https://github.com/lucidreamiss/ 链接地址\ntitle: 清明梦\nsubtitle: '一起变好'\ndescription: '博客'\nauthor: 涛桑\nlanguage: zh-CN\ntimezone: 'Asia/Shanghai'\n```\n\n代码块进阶语法规则：\n\n```markdown\n    > ```[language] [title] [url] [link text]\n    >    code snippet\n    > ```    \n```\n\n其中，各参数意义如下：\n\n- langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字\n- title：代码块标题，将会显示在左上角\n- url：链接地址，如果没有指定 link text 则会在右上角显示 link\n- link text：链接名称，指定 url 后有效，将会显示在右上角\n\nurl 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。\n\n如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。\n\n可以在站点配置文件中设置 `highlight.auto_detect: true` 来开启自动语言检测高亮。\n\n如果设置语言为 diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。\n\n```diff _config.yml\n highlight:\n   enable: true\n   line_number: false\n-  auto_detect: false\n+  auto_detect: true\n   tab_replace:\n```\n\n### 3.note标签\n\n通过 note 标签可以为段落添加背景色，语法如下：\n\n```txt\n{% note class %}\n文本内容 (支持行内标签)\n{% endnote %}\n```\n\n支持的 class 种类包括 `default` `primary` `success` `info` `warning` `danger`，也可以不指定 class。\n\n{% note primary %}\nprimary note tag\n{% endnote %}\n\n{% note success %}\nsuccess note tag\n{% endnote %}\n\n{% note info %}\ninfo note tag\n{% endnote %}\n\n{% note warning %}\nwarning note tag\n{% endnote %}\n\n{% note danger %}\ndanger note tag\n{% endnote %}\n\n{% note %}\nundefined class note tag\n{% endnote %}\n\n样式配置可在主题配置文件中进行设置\n\n```yml themes/next/_config.yml\nnote:\n  # Note 标签样式预设\n  style: modern  # simple | modern | flat | disabled\n  icons: false  # 是否显示图标\n  border_radius: 3  # 圆角半径\n  light_bg_offset: 0  # 默认背景减淡效果，以百分比计算\n```\n\n### 4.label标签\n\n使用label标签可以为文字添加背景色，语法如下：\n\n```txt\n{% label [class]@text %}\n```\n\n支持的class种类与`note`一致。\n\n示例如下：\n\n{% quote %}\nI heard the echo, {% label default@from the valleys and the heart %}\nOpen to the lonely soul of {% label info@sickle harvesting %}\nRepeat outrightly, but also repeat the well-being of\nEventually {% label warning@swaying in the desert oasis %}\n{% label success@I believe %} I am\n{% label primary@Born as the bright summer flowers %}\nDo not withered undefeated fiery demon rule\nHeart rate and breathing to bear {% label danger@the load of the cumbersome %}\nBored\n{% endquote %}\n\n可在主题配置文件中设置 `label: false` 来取消label标签默认CSS样式。\n\n### 5.button按钮\n\n通过button标签可以快速添加带有主题样式的按钮，语法如下：\n\n```\n{% button /path/to/url/, text, icon [class], title %}\n```\n\n也可简写为：\n\n```\n{% btn /path/to/url/, text, icon [class], title %}\n```\n\n其中， 图标ID来源于 [FontAwesome](https://fontawesome.com/v4.7.0/icons/) 。\n\n使用示例如下：\n\n```\n{% btn #, 文本 %}\n{% btn #, 文本 & 标题,, 标题 %}\n{% btn #, 文本 & 图标, home %}\n{% btn #, 文本 & 大图标 (固定宽度), home fa-fw fa-lg %}\n```\n\n<p>{% btn #, 文本 %}</p>\n<p>{% btn #, 文本 & 标题,, 标题 %}</p>\n<p>{% btn #, 文本 & 图标, home %}</p>\n<p>{% btn #, 文本 & 大图标 (固定宽度), home fa-fw fa-lg %}</p>\n\n### 6.tab标签\n\ntab标签用于快速创建tab选项卡，语法如下\n\n``` html\n{% tabs [Unique name], [index] %}\n  <!-- tab [Tab caption]@[icon] -->\n  标签页内容（支持行内标签）\n  <!-- endtab -->\n{% endtabs %}\n```\n\n其中，各参数意义如下：\n\n- Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀\n- index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页\n- Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题\n- icon: 在标签页标题中添加Font awesome图标\n\n使用示例如下：\n\n``` plain\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n```\n\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n\n### 7.引用站内链接\n\n可以通过如下语法引入站内文章的地址或链接：\n\n```\n{% post_path slug %}\n{% post_link slug [title] %}\n```\n\n其中，`slug` 表示 `_post` 目录下的Markdown文件名。\n\n`post_path` 标签将会渲染为文章的地址，即 `permalink`；而 `post_link` 标签将会渲染为链接，可以通过 `title` 指定链接标题。\n\n如以下标签将会生成 `{% post_path hexo-writing-skills %}`\n\n```txt\n{% post_path hexo-writing-skills %}\n```\n\n而以下标签则会生成 {% post_link hexo-writing-skills 链接标题 %}\n\n```txt\n{% post_link hexo-writing-skills 链接标题 %}\n```\n\n这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 `permalink` 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。\n\n### 8.插入Gist\n\n如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:\n\n```\n{% gist gist_id [filename] %}\n```\n\n其中，各参数意义如下：\n\n- gist_id: Gist仓库页面url中最后一段随机字符串\n- filename: Gist中的文件名\n\n如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：\n\n``` html\n<script src=\"https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js\"></script>\n```\n\n如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。\n\n如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。\n\n{% note warning %}\n在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。\n{% endnote %}\n\n## 插入多媒体\n\n### 插入图片\n\nMarkdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。\n\n所以在Markdown中插入一张图片要分为以下几步来进行：\n\n1. 将图片资源上传到图床中\n2. 获取图片外链\n3. 插入到Markdown文档中\n\n对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：\n\n- 图床是否提供了便捷的图形化管理工具用于图片的上传下载？\n\n  如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。\n\n  ![腾讯云COS客户端界面截图](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/hexo-writing-skills/cos_preview.png \"腾讯云COS客户端界面截图\")\n\n- 是否能够方便的插入到Markdown文档中？\n\n  这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。\n\n  其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。\n\n{% note info %}\n本站使用腾讯云COS提供对象存储服务。\n{% endnote %}\n\n### 网易云音乐\n\n在网页版云音乐中找到歌曲，点击生成外链播放器：\n\n![获取歌曲外链](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png \"获取歌曲外链\")\n\n根据个人喜好选择播放器尺寸和播放模式：\n\n![获取插件代码](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png \"获取插件代码\")\n\n将获取到的 `iframe` 代码添加到页面中，默认样式如下：\n\n<div class=\"fluid-vids\" style=\"position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"329\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66\" style=\"width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;\">\n</iframe></div>\n\n播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 `iframe` 在渲染的时候被处理过，外层包了一个类名为 `fluid-vids` 的 `div` 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 `music.163.com` 域名包含在了处理逻辑内，只需要将该行删除即可。\n\n``` js themes\\next\\source\\js\\src\\utils.js\nvar SUPPORTED_PLAYERS = [\n  'www.youtube.com',\n  'player.vimeo.com',\n  'player.youku.com',\n  //'music.163.com',\n  'www.tudou.com'\n];\n```\n\n这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 `iframe` 包在 `<center>` 标签内。\n\n```html\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\"></iframe>\n</center>\n```\n\n效果如下：\n\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\">\n  </iframe>\n</center>\n\n{% note warning %}\n其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 `<center>` `<strong>` 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。\n{% endnote %}\n\n如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 `iframe` 元素前后是否多了 `<br>` 元素：\n\n![播放器前后空行代码](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png \"播放器前后空行代码\")\n\n造成这样的原因是Markdown渲染引擎把 `<center>` 标签和 `<iframe>` 标签之间的回车当作 `<br>` 来处理了。参考链接: [Hexo issues #1388](https://github.com/hexojs/hexo/issues/1388)\n\n简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。\n\n另外一种方案是在站点配置文件中添加如下代码：\n\n``` yaml _config.yml\nmarked:\n  gfm: true\n  breaks: false\n```\n\n重启服务器之后更改才会生效。\n\n{% note warning %}\n网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。\n{% endnote%}\n\n### Aplayer音频播放器\n\n[APlayer](https://aplayer.js.org/#/)是由 [DIYgod](https://github.com/DIYgod) 编写的HTML5音频播放器，提供了另一种音频播放方案。\n\n{% note %}\n了解诞生背景： [APlayer - 送给小狐狸和小兔子的 HTML5 播放器](https://diygod.me/2167/)\n{% endnote%}\n\n借助 [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer) 插件，可以通过标签的形式方便快捷的插入音频组件。\n\n在站点根目录下执行以下命令：\n\n``` bash\n$ npm install hexo-tag-aplayer --save\n```\n\n然后在页面中按照以下标签格式插入歌曲链接和相关信息：\n\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n其中，各参数意义如下：\n\n- title: 曲目标题\n- author: 曲目作者\n- url: 音乐文件 URL 地址\n- picture_url: (可选) 音乐对应的图片地址\n- narrow: （可选）播放器袖珍风格\n- autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能\n- width:xxx: (可选) 播放器宽度 (默认: 100%)\n- lrc:xxx: （可选）歌词文件 URL 地址\n\n示例效果如下：\n\n{% aplayer \"前前世世 -《君の名は。》\" \"RADWIMPS\" \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3\" \"http://pic.5577.com/up/2016-12/201612891712576.png\" lrc:\"https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc\" %}\n\n当开启 Hexo 的 [文章资源文件夹](https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9) 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：\n\n```\n{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n```\n\n如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则\n\n``` css themes\\next\\source\\css\\_custom\\custom.styl\n//Aplayer 播放器居中\ndiv.aplayer {\n  margin: 5px auto;\n  max-width: 500px;\n}\n```\n\n{% note info %}\n插入播放列表功能请参考： [hexo-tag-aplayer | With playlist](https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist)\n{% endnote %}","source":"_posts/hexo-writing-skills.md","raw":"---\ntitle: Hexo博客写作技巧\ndate: 2022-01-03 21:12:48\ntags: [Hexo, Markdown]\ndescription: 本文介绍Hexo博客的写作技巧。\n---\n\n## Markdown基本语法\n\nMarkdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。\n\n| 元素     | Markdown语法                              | 效果预览                                               |\n| :--------: | :-----------------------------------------: | :-------------- |\n| 标题     | `# 标题1`<br>`## h2`<br>`### h3`          | <div style=\"font-weight: bold\"><div style=\"font-size: 24px\">标题一</div><div style=\"font-size: 22px\">标题二</div><div style=\"font-size: 20px\">标题三</div></div>  |\n| 加粗     | `**文字加粗**`                            | **文字加粗**                                           |\n| 引用     | `> 引用文字`                              | <blockquote>引用文字</blockquote>                      |\n| 有序列表 | `1. 第一项`<br>`2. 第二项`<br>`3. 第三项` | <ol><li>第一项</li><li>第二项</li><li>第三项</li></ol> |\n| 无序列表 | `- 第一项`<br>`- 第二项`<br>`- 第三项`    | <ul><li>第一项</li><li>第二项</li><li>第三项</li></ul> |\n| 链接     | `[链接](url)`         | [链接](url)                        |\n| 图片     | `![图片](image.jpg)`                      |          <i class=\"fa fa-image\"></i>                                             |\n| 水平线   | `---`                                     | <hr>                                                   |\n| 代码     | <code>\\`code\\`</code>                     | `code`                                                 |\n| 代码块     | <code>\\`\\`\\`code snippet\\`\\`\\`</code>                     |              <figure class=\"highlight\"><table><tbody><tr><td class=\"code\"><pre>code snippet</pre></td></tr></tbody></table></figure>                                   |\n\n{% note info %}\n更多语法请参考 [基础语法 | Markdown Guide](https://www.markdownguide.org/basic-syntax) 和 [扩展语法 | Markdown Guide](https://www.markdownguide.org/extended-syntax)\n{% endnote %}\n\n## Hexo内置标签\n\nMarkdown满足了最基本的文档编写需求，`标签(Tag Plugin)`是Hexo提供的一种快速生成特定内容的方式，用来提供更多样式和功能，例如，标准的Markdown语法中，我们无法制定图片的大小，这是我们可以使用`标签`来解决。值得一提的是，`标签(Tag Plugin)`有Plugin的属性，你可以自主编写独特的标签来满足你的需求。\n\n### 1.文本居中的引用\n\n{% centerquote %} 看，`centerquote`是这样的，俺觉得这个用处不大{% endcenterquote %}\n\n```html 标签语法\n<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<!-- 其中 class=\"blockquote-center\" 是必须的 -->\n<blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n\n<!-- 标签方式 -->\n{% centerquote %}blah blah blah{% endcenterquote %}\n\n<!-- 标签别名 -->\n{% cq %} blah blah blah {% endcq %}\n```\n\n### 2.代码块的进阶用法\n\n```yml _config.xml https://github.com/lucidreamiss/ 链接地址\ntitle: 清明梦\nsubtitle: '一起变好'\ndescription: '博客'\nauthor: 涛桑\nlanguage: zh-CN\ntimezone: 'Asia/Shanghai'\n```\n\n代码块进阶语法规则：\n\n```markdown\n    > ```[language] [title] [url] [link text]\n    >    code snippet\n    > ```    \n```\n\n其中，各参数意义如下：\n\n- langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字\n- title：代码块标题，将会显示在左上角\n- url：链接地址，如果没有指定 link text 则会在右上角显示 link\n- link text：链接名称，指定 url 后有效，将会显示在右上角\n\nurl 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。\n\n如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。\n\n可以在站点配置文件中设置 `highlight.auto_detect: true` 来开启自动语言检测高亮。\n\n如果设置语言为 diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。\n\n```diff _config.yml\n highlight:\n   enable: true\n   line_number: false\n-  auto_detect: false\n+  auto_detect: true\n   tab_replace:\n```\n\n### 3.note标签\n\n通过 note 标签可以为段落添加背景色，语法如下：\n\n```txt\n{% note class %}\n文本内容 (支持行内标签)\n{% endnote %}\n```\n\n支持的 class 种类包括 `default` `primary` `success` `info` `warning` `danger`，也可以不指定 class。\n\n{% note primary %}\nprimary note tag\n{% endnote %}\n\n{% note success %}\nsuccess note tag\n{% endnote %}\n\n{% note info %}\ninfo note tag\n{% endnote %}\n\n{% note warning %}\nwarning note tag\n{% endnote %}\n\n{% note danger %}\ndanger note tag\n{% endnote %}\n\n{% note %}\nundefined class note tag\n{% endnote %}\n\n样式配置可在主题配置文件中进行设置\n\n```yml themes/next/_config.yml\nnote:\n  # Note 标签样式预设\n  style: modern  # simple | modern | flat | disabled\n  icons: false  # 是否显示图标\n  border_radius: 3  # 圆角半径\n  light_bg_offset: 0  # 默认背景减淡效果，以百分比计算\n```\n\n### 4.label标签\n\n使用label标签可以为文字添加背景色，语法如下：\n\n```txt\n{% label [class]@text %}\n```\n\n支持的class种类与`note`一致。\n\n示例如下：\n\n{% quote %}\nI heard the echo, {% label default@from the valleys and the heart %}\nOpen to the lonely soul of {% label info@sickle harvesting %}\nRepeat outrightly, but also repeat the well-being of\nEventually {% label warning@swaying in the desert oasis %}\n{% label success@I believe %} I am\n{% label primary@Born as the bright summer flowers %}\nDo not withered undefeated fiery demon rule\nHeart rate and breathing to bear {% label danger@the load of the cumbersome %}\nBored\n{% endquote %}\n\n可在主题配置文件中设置 `label: false` 来取消label标签默认CSS样式。\n\n### 5.button按钮\n\n通过button标签可以快速添加带有主题样式的按钮，语法如下：\n\n```\n{% button /path/to/url/, text, icon [class], title %}\n```\n\n也可简写为：\n\n```\n{% btn /path/to/url/, text, icon [class], title %}\n```\n\n其中， 图标ID来源于 [FontAwesome](https://fontawesome.com/v4.7.0/icons/) 。\n\n使用示例如下：\n\n```\n{% btn #, 文本 %}\n{% btn #, 文本 & 标题,, 标题 %}\n{% btn #, 文本 & 图标, home %}\n{% btn #, 文本 & 大图标 (固定宽度), home fa-fw fa-lg %}\n```\n\n<p>{% btn #, 文本 %}</p>\n<p>{% btn #, 文本 & 标题,, 标题 %}</p>\n<p>{% btn #, 文本 & 图标, home %}</p>\n<p>{% btn #, 文本 & 大图标 (固定宽度), home fa-fw fa-lg %}</p>\n\n### 6.tab标签\n\ntab标签用于快速创建tab选项卡，语法如下\n\n``` html\n{% tabs [Unique name], [index] %}\n  <!-- tab [Tab caption]@[icon] -->\n  标签页内容（支持行内标签）\n  <!-- endtab -->\n{% endtabs %}\n```\n\n其中，各参数意义如下：\n\n- Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀\n- index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页\n- Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题\n- icon: 在标签页标题中添加Font awesome图标\n\n使用示例如下：\n\n``` plain\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n```\n\n{% tabs Tab标签列表 %}\n  <!-- tab 标签页1 -->\n    标签页1文本内容\n  <!-- endtab -->\n  <!-- tab 标签页2 -->\n    标签页2文本内容\n  <!-- endtab -->\n  <!-- tab 标签页3 -->\n    标签页3文本内容\n  <!-- endtab -->\n{% endtabs %}\n\n### 7.引用站内链接\n\n可以通过如下语法引入站内文章的地址或链接：\n\n```\n{% post_path slug %}\n{% post_link slug [title] %}\n```\n\n其中，`slug` 表示 `_post` 目录下的Markdown文件名。\n\n`post_path` 标签将会渲染为文章的地址，即 `permalink`；而 `post_link` 标签将会渲染为链接，可以通过 `title` 指定链接标题。\n\n如以下标签将会生成 `{% post_path hexo-writing-skills %}`\n\n```txt\n{% post_path hexo-writing-skills %}\n```\n\n而以下标签则会生成 {% post_link hexo-writing-skills 链接标题 %}\n\n```txt\n{% post_link hexo-writing-skills 链接标题 %}\n```\n\n这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 `permalink` 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。\n\n### 8.插入Gist\n\n如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:\n\n```\n{% gist gist_id [filename] %}\n```\n\n其中，各参数意义如下：\n\n- gist_id: Gist仓库页面url中最后一段随机字符串\n- filename: Gist中的文件名\n\n如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：\n\n``` html\n<script src=\"https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js\"></script>\n```\n\n如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。\n\n如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。\n\n{% note warning %}\n在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。\n{% endnote %}\n\n## 插入多媒体\n\n### 插入图片\n\nMarkdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。\n\n所以在Markdown中插入一张图片要分为以下几步来进行：\n\n1. 将图片资源上传到图床中\n2. 获取图片外链\n3. 插入到Markdown文档中\n\n对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：\n\n- 图床是否提供了便捷的图形化管理工具用于图片的上传下载？\n\n  如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。\n\n  ![腾讯云COS客户端界面截图](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/hexo-writing-skills/cos_preview.png \"腾讯云COS客户端界面截图\")\n\n- 是否能够方便的插入到Markdown文档中？\n\n  这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。\n\n  其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。\n\n{% note info %}\n本站使用腾讯云COS提供对象存储服务。\n{% endnote %}\n\n### 网易云音乐\n\n在网页版云音乐中找到歌曲，点击生成外链播放器：\n\n![获取歌曲外链](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png \"获取歌曲外链\")\n\n根据个人喜好选择播放器尺寸和播放模式：\n\n![获取插件代码](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png \"获取插件代码\")\n\n将获取到的 `iframe` 代码添加到页面中，默认样式如下：\n\n<div class=\"fluid-vids\" style=\"position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"329\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66\" style=\"width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;\">\n</iframe></div>\n\n播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 `iframe` 在渲染的时候被处理过，外层包了一个类名为 `fluid-vids` 的 `div` 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 `music.163.com` 域名包含在了处理逻辑内，只需要将该行删除即可。\n\n``` js themes\\next\\source\\js\\src\\utils.js\nvar SUPPORTED_PLAYERS = [\n  'www.youtube.com',\n  'player.vimeo.com',\n  'player.youku.com',\n  //'music.163.com',\n  'www.tudou.com'\n];\n```\n\n这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 `iframe` 包在 `<center>` 标签内。\n\n```html\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\"></iframe>\n</center>\n```\n\n效果如下：\n\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\">\n  </iframe>\n</center>\n\n{% note warning %}\n其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 `<center>` `<strong>` 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。\n{% endnote %}\n\n如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 `iframe` 元素前后是否多了 `<br>` 元素：\n\n![播放器前后空行代码](http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png \"播放器前后空行代码\")\n\n造成这样的原因是Markdown渲染引擎把 `<center>` 标签和 `<iframe>` 标签之间的回车当作 `<br>` 来处理了。参考链接: [Hexo issues #1388](https://github.com/hexojs/hexo/issues/1388)\n\n简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。\n\n另外一种方案是在站点配置文件中添加如下代码：\n\n``` yaml _config.yml\nmarked:\n  gfm: true\n  breaks: false\n```\n\n重启服务器之后更改才会生效。\n\n{% note warning %}\n网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。\n{% endnote%}\n\n### Aplayer音频播放器\n\n[APlayer](https://aplayer.js.org/#/)是由 [DIYgod](https://github.com/DIYgod) 编写的HTML5音频播放器，提供了另一种音频播放方案。\n\n{% note %}\n了解诞生背景： [APlayer - 送给小狐狸和小兔子的 HTML5 播放器](https://diygod.me/2167/)\n{% endnote%}\n\n借助 [hexo-tag-aplayer](https://github.com/MoePlayer/hexo-tag-aplayer) 插件，可以通过标签的形式方便快捷的插入音频组件。\n\n在站点根目录下执行以下命令：\n\n``` bash\n$ npm install hexo-tag-aplayer --save\n```\n\n然后在页面中按照以下标签格式插入歌曲链接和相关信息：\n\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}\n```\n\n其中，各参数意义如下：\n\n- title: 曲目标题\n- author: 曲目作者\n- url: 音乐文件 URL 地址\n- picture_url: (可选) 音乐对应的图片地址\n- narrow: （可选）播放器袖珍风格\n- autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能\n- width:xxx: (可选) 播放器宽度 (默认: 100%)\n- lrc:xxx: （可选）歌词文件 URL 地址\n\n示例效果如下：\n\n{% aplayer \"前前世世 -《君の名は。》\" \"RADWIMPS\" \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3\" \"http://pic.5577.com/up/2016-12/201612891712576.png\" lrc:\"https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc\" %}\n\n当开启 Hexo 的 [文章资源文件夹](https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9) 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：\n\n```\n{% aplayer \"Caffeine\" \"Jeff Williams\" \"caffeine.mp3\" \"picture.jpg\" \"lrc:caffeine.txt\" %}\n```\n\n如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则\n\n``` css themes\\next\\source\\css\\_custom\\custom.styl\n//Aplayer 播放器居中\ndiv.aplayer {\n  margin: 5px auto;\n  max-width: 500px;\n}\n```\n\n{% note info %}\n插入播放列表功能请参考： [hexo-tag-aplayer | With playlist](https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist)\n{% endnote %}","slug":"hexo-writing-skills","published":1,"updated":"2022-01-03T13:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54ro3t50007n5q77t494al2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"Markdown基本语法\"><a href=\"#Markdown基本语法\" class=\"headerlink\" title=\"Markdown基本语法\"></a>Markdown基本语法</h2><p>Markdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">元素</th>\n<th align=\"center\">Markdown语法</th>\n<th align=\"left\">效果预览</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">标题</td>\n<td align=\"center\"><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td>\n<td align=\"left\"><div style=\"font-weight: bold\"><div style=\"font-size: 24px\">标题一</div><div style=\"font-size: 22px\">标题二</div><div style=\"font-size: 20px\">标题三</div></div></td>\n</tr>\n<tr>\n<td align=\"center\">加粗</td>\n<td align=\"center\"><code>**文字加粗**</code></td>\n<td align=\"left\"><strong>文字加粗</strong></td>\n</tr>\n<tr>\n<td align=\"center\">引用</td>\n<td align=\"center\"><code>&gt; 引用文字</code></td>\n<td align=\"left\"><blockquote>引用文字</blockquote></td>\n</tr>\n<tr>\n<td align=\"center\">有序列表</td>\n<td align=\"center\"><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td>\n<td align=\"left\"><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td>\n</tr>\n<tr>\n<td align=\"center\">无序列表</td>\n<td align=\"center\"><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td>\n<td align=\"left\"><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td>\n</tr>\n<tr>\n<td align=\"center\">链接</td>\n<td align=\"center\"><code>[链接](url)</code></td>\n<td align=\"left\"><a href=\"url\">链接</a></td>\n</tr>\n<tr>\n<td align=\"center\">图片</td>\n<td align=\"center\"><code>![图片](image.jpg)</code></td>\n<td align=\"left\"><i class=\"fa fa-image\"></i></td>\n</tr>\n<tr>\n<td align=\"center\">水平线</td>\n<td align=\"center\"><code>---</code></td>\n<td align=\"left\"><hr></td>\n</tr>\n<tr>\n<td align=\"center\">代码</td>\n<td align=\"center\"><code>`code`</code></td>\n<td align=\"left\"><code>code</code></td>\n</tr>\n<tr>\n<td align=\"center\">代码块</td>\n<td align=\"center\"><code>```code snippet```</code></td>\n<td align=\"left\"><figure class=\"highlight\"><table><tbody><tr><td class=\"code\"><pre>code snippet</pre></td></tr></tbody></table></figure></td>\n</tr>\n</tbody></table>\n<div class=\"note info\">\n            <p>更多语法请参考 <a href=\"https://www.markdownguide.org/basic-syntax\">基础语法 | Markdown Guide</a> 和 <a href=\"https://www.markdownguide.org/extended-syntax\">扩展语法 | Markdown Guide</a></p>\n          </div>\n\n<h2 id=\"Hexo内置标签\"><a href=\"#Hexo内置标签\" class=\"headerlink\" title=\"Hexo内置标签\"></a>Hexo内置标签</h2><p>Markdown满足了最基本的文档编写需求，<code>标签(Tag Plugin)</code>是Hexo提供的一种快速生成特定内容的方式，用来提供更多样式和功能，例如，标准的Markdown语法中，我们无法制定图片的大小，这是我们可以使用<code>标签</code>来解决。值得一提的是，<code>标签(Tag Plugin)</code>有Plugin的属性，你可以自主编写独特的标签来满足你的需求。</p>\n<h3 id=\"1-文本居中的引用\"><a href=\"#1-文本居中的引用\" class=\"headerlink\" title=\"1.文本居中的引用\"></a>1.文本居中的引用</h3><blockquote class=\"blockquote-center\">\n            <i class=\"fa fa-quote-left\"></i>\n            <p>看，<code>centerquote</code>是这样的，俺觉得这个用处不大</p>\n\n            <i class=\"fa fa-quote-right\"></i>\n          </blockquote>\n\n<figure class=\"highlight html\"><figcaption><span>标签语法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;blockquote-center&quot;</span>&gt;</span>blah blah blah<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签方式 --&gt;</span></span><br><span class=\"line\">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签别名 --&gt;</span></span><br><span class=\"line\">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-代码块的进阶用法\"><a href=\"#2-代码块的进阶用法\" class=\"headerlink\" title=\"2.代码块的进阶用法\"></a>2.代码块的进阶用法</h3><figure class=\"highlight yml\"><figcaption><span>_config.xml</span><a href=\"https://github.com/lucidreamiss/\">链接地址</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">清明梦</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;一起变好&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">涛桑</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码块进阶语法规则：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; ```[language] [title] [url] [link text]</span></span><br><span class=\"line\"><span class=\"quote\">&gt;    code snippet</span></span><br><span class=\"line\"><span class=\"quote\">&gt; ```    </span></span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>\n<li>title：代码块标题，将会显示在左上角</li>\n<li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li>\n<li>link text：链接名称，指定 url 后有效，将会显示在右上角</li>\n</ul>\n<p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</p>\n<p>如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p>\n<p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p>\n<p>如果设置语言为 diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p>\n<figure class=\"highlight diff\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> highlight:</span><br><span class=\"line\">   enable: true</span><br><span class=\"line\">   line_number: false</span><br><span class=\"line\"><span class=\"deletion\">-  auto_detect: false</span></span><br><span class=\"line\"><span class=\"addition\">+  auto_detect: true</span></span><br><span class=\"line\">   tab_replace:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-note标签\"><a href=\"#3-note标签\" class=\"headerlink\" title=\"3.note标签\"></a>3.note标签</h3><p>通过 note 标签可以为段落添加背景色，语法如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note class %&#125;</span><br><span class=\"line\">文本内容 (支持行内标签)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class。</p>\n<div class=\"note primary\">\n            <p>primary note tag</p>\n          </div>\n\n<div class=\"note success\">\n            <p>success note tag</p>\n          </div>\n\n<div class=\"note info\">\n            <p>info note tag</p>\n          </div>\n\n<div class=\"note warning\">\n            <p>warning note tag</p>\n          </div>\n\n<div class=\"note danger\">\n            <p>danger note tag</p>\n          </div>\n\n<div class=\"note \">\n            <p>undefined class note tag</p>\n          </div>\n\n<p>样式配置可在主题配置文件中进行设置</p>\n<figure class=\"highlight yml\"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note 标签样式预设</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">modern</span>  <span class=\"comment\"># simple | modern | flat | disabled</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 是否显示图标</span></span><br><span class=\"line\">  <span class=\"attr\">border_radius:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 圆角半径</span></span><br><span class=\"line\">  <span class=\"attr\">light_bg_offset:</span> <span class=\"number\">0</span>  <span class=\"comment\"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-label标签\"><a href=\"#4-label标签\" class=\"headerlink\" title=\"4.label标签\"></a>4.label标签</h3><p>使用label标签可以为文字添加背景色，语法如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label [class]@text %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持的class种类与<code>note</code>一致。</p>\n<p>示例如下：</p>\n<blockquote><p>I heard the echo, <span class=\"label default\">from the valleys and the heart</span><br>Open to the lonely soul of <span class=\"label info\">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class=\"label warning\">swaying in the desert oasis</span><br><span class=\"label success\">I believe</span> I am<br><span class=\"label primary\">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class=\"label danger\">the load of the cumbersome</span><br>Bored</p>\n</blockquote>\n\n<p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p>\n<h3 id=\"5-button按钮\"><a href=\"#5-button按钮\" class=\"headerlink\" title=\"5.button按钮\"></a>5.button按钮</h3><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可简写为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中， 图标ID来源于 <a href=\"https://fontawesome.com/v4.7.0/icons/\">FontAwesome</a> 。</p>\n<p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn #, 文本 %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-\"></i>文本\n          </a></p>\n<p><a class=\"btn\" href=\"#\" title=\"标题\">\n            <i class=\"fa fa-\"></i>文本 & 标题\n          </a></p>\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-home\"></i>文本 & 图标\n          </a></p>\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-home fa-fw fa-lg\"></i>文本 & 大图标 (固定宽度)\n          </a></p>\n\n<h3 id=\"6-tab标签\"><a href=\"#6-tab标签\" class=\"headerlink\" title=\"6.tab标签\"></a>6.tab标签</h3><p>tab标签用于快速创建tab选项卡，语法如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class=\"line\">  标签页内容（支持行内标签）</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li>\n<li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li>\n<li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li>\n<li>icon: 在标签页标题中添加Font awesome图标</li>\n</ul>\n<p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab标签列表 %&#125;</span><br><span class=\"line\">  &lt;!-- tab 标签页1 --&gt;</span><br><span class=\"line\">    标签页1文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页2 --&gt;</span><br><span class=\"line\">    标签页2文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页3 --&gt;</span><br><span class=\"line\">    标签页3文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"tab标签列表\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tab标签列表-1\">标签页1</a></li><li class=\"tab\"><a href=\"#tab标签列表-2\">标签页2</a></li><li class=\"tab\"><a href=\"#tab标签列表-3\">标签页3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tab标签列表-1\"><p>  标签页1文本内容</p></div><div class=\"tab-pane\" id=\"tab标签列表-2\"><p>  标签页2文本内容</p></div><div class=\"tab-pane\" id=\"tab标签列表-3\"><p>  标签页3文本内容</p></div></div></div>\n\n<h3 id=\"7-引用站内链接\"><a href=\"#7-引用站内链接\" class=\"headerlink\" title=\"7.引用站内链接\"></a>7.引用站内链接</h3><p>可以通过如下语法引入站内文章的地址或链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path slug %&#125;</span><br><span class=\"line\">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p>\n<p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p>\n<p>如以下标签将会生成 <code>&#123;% post_path hexo-writing-skills %&#125;</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path hexo-writing-skills %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而以下标签则会生成 <a href=\"/2022/01/03/hexo-writing-skills/\" title=\"链接标题\">链接标题</a></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_link hexo-writing-skills 链接标题 %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p>\n<h3 id=\"8-插入Gist\"><a href=\"#8-插入Gist\" class=\"headerlink\" title=\"8.插入Gist\"></a>8.插入Gist</h3><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>gist_id: Gist仓库页面url中最后一段随机字符串</li>\n<li>filename: Gist中的文件名</li>\n</ul>\n<p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p>\n<p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p>\n<div class=\"note warning\">\n            <p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p>\n          </div>\n\n<h2 id=\"插入多媒体\"><a href=\"#插入多媒体\" class=\"headerlink\" title=\"插入多媒体\"></a>插入多媒体</h2><h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>Markdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。</p>\n<p>所以在Markdown中插入一张图片要分为以下几步来进行：</p>\n<ol>\n<li>将图片资源上传到图床中</li>\n<li>获取图片外链</li>\n<li>插入到Markdown文档中</li>\n</ol>\n<p>对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：</p>\n<ul>\n<li><p>图床是否提供了便捷的图形化管理工具用于图片的上传下载？</p>\n<p>如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/hexo-writing-skills/cos_preview.png\" alt=\"腾讯云COS客户端界面截图\" title=\"腾讯云COS客户端界面截图\"></p>\n</li>\n<li><p>是否能够方便的插入到Markdown文档中？</p>\n<p>这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。</p>\n<p>其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。</p>\n</li>\n</ul>\n<div class=\"note info\">\n            <p>本站使用腾讯云COS提供对象存储服务。</p>\n          </div>\n\n<h3 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h3><p>在网页版云音乐中找到歌曲，点击生成外链播放器：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png\" alt=\"获取歌曲外链\" title=\"获取歌曲外链\"></p>\n<p>根据个人喜好选择播放器尺寸和播放模式：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png\" alt=\"获取插件代码\" title=\"获取插件代码\"></p>\n<p>将获取到的 <code>iframe</code> 代码添加到页面中，默认样式如下：</p>\n<div class=\"fluid-vids\" style=\"position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"329\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66\" style=\"width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;\">\n</iframe></div>\n\n<p>播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 <code>iframe</code> 在渲染的时候被处理过，外层包了一个类名为 <code>fluid-vids</code> 的 <code>div</code> 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 <code>music.163.com</code> 域名包含在了处理逻辑内，只需要将该行删除即可。</p>\n<figure class=\"highlight js\"><figcaption><span>themes\\next\\source\\js\\src\\utils.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">SUPPORTED_PLAYERS</span> = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;www.youtube.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;player.vimeo.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;player.youku.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//&#x27;music.163.com&#x27;,</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;www.tudou.com&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 <code>iframe</code> 包在 <code>&lt;center&gt;</code> 标签内。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;no&quot;</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">329</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\">\n  </iframe>\n</center>\n\n<div class=\"note warning\">\n            <p>其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 <code>&lt;center&gt;</code> <code>&lt;strong&gt;</code> 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。</p>\n          </div>\n\n<p>如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 <code>iframe</code> 元素前后是否多了 <code>&lt;br&gt;</code> 元素：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png\" alt=\"播放器前后空行代码\" title=\"播放器前后空行代码\"></p>\n<p>造成这样的原因是Markdown渲染引擎把 <code>&lt;center&gt;</code> 标签和 <code>&lt;iframe&gt;</code> 标签之间的回车当作 <code>&lt;br&gt;</code> 来处理了。参考链接: <a href=\"https://github.com/hexojs/hexo/issues/1388\">Hexo issues #1388</a></p>\n<p>简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。</p>\n<p>另外一种方案是在站点配置文件中添加如下代码：</p>\n<figure class=\"highlight yaml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">gfm:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">breaks:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>重启服务器之后更改才会生效。</p>\n<div class=\"note warning\">\n            <p>网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。</p>\n          </div>\n\n<h3 id=\"Aplayer音频播放器\"><a href=\"#Aplayer音频播放器\" class=\"headerlink\" title=\"Aplayer音频播放器\"></a>Aplayer音频播放器</h3><p><a href=\"https://aplayer.js.org/#/\">APlayer</a>是由 <a href=\"https://github.com/DIYgod\">DIYgod</a> 编写的HTML5音频播放器，提供了另一种音频播放方案。</p>\n<div class=\"note \">\n            <p>了解诞生背景： <a href=\"https://diygod.me/2167/\">APlayer - 送给小狐狸和小兔子的 HTML5 播放器</a></p>\n          </div>\n\n<p>借助 <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer\">hexo-tag-aplayer</a> 插件，可以通过标签的形式方便快捷的插入音频组件。</p>\n<p>在站点根目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>title: 曲目标题</li>\n<li>author: 曲目作者</li>\n<li>url: 音乐文件 URL 地址</li>\n<li>picture_url: (可选) 音乐对应的图片地址</li>\n<li>narrow: （可选）播放器袖珍风格</li>\n<li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>\n<li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li>\n<li>lrc:xxx: （可选）歌词文件 URL 地址</li>\n</ul>\n<p>示例效果如下：</p>\n\n        <div id=\"aplayer-wyTbjqFe\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-wyTbjqFe\"),\n            narrow: false,\n            autoplay: false,\n            showlrc: 3,\n            music: {\n              title: \"前前世世 -《君の名は。》\",\n              author: \"RADWIMPS\",\n              url: \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3\",\n              pic: \"http://pic.5577.com/up/2016-12/201612891712576.png\",\n              lrc: \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n\n<p>当开启 Hexo 的 <a href=\"https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9\">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则</p>\n<figure class=\"highlight css\"><figcaption><span>themes\\next\\source\\css\\_custom\\custom.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Aplayer 播放器居中</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.aplayer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\">\n            <p>插入播放列表功能请参考： <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist\">hexo-tag-aplayer | With playlist</a></p>\n          </div>","site":{"data":{}},"length":7614,"excerpt":"Markdown基本语法\nMarkdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。\n\n元素Markdown语法效果预览标题# 标题1\n## h2\n### h3标题一标题二标题三加粗**文字加粗**文字加粗引用> 引用文字引用文字有序列表1. 第一项\n2. 第二项\n3. 第三项 1. 第一项\n 2. 第二项\n 3. 第三项\n\n无序列表- 第一项\n- 第二项\n- 第三项 * 第一项\n * 第二项\n * 第三项\n\n链接[链接](url)链接图片![图片](image.jpg)水平线---\n\n\n代码`code`code代码块```code snippet```code snippet\n\n更多语法请参考 基础语法 | Mark","more":"<h2 id=\"Markdown基本语法\"><a href=\"#Markdown基本语法\" class=\"headerlink\" title=\"Markdown基本语法\"></a>Markdown基本语法</h2><p>Markdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">元素</th>\n<th align=\"center\">Markdown语法</th>\n<th align=\"left\">效果预览</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">标题</td>\n<td align=\"center\"><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td>\n<td align=\"left\"><div style=\"font-weight: bold\"><div style=\"font-size: 24px\">标题一</div><div style=\"font-size: 22px\">标题二</div><div style=\"font-size: 20px\">标题三</div></div></td>\n</tr>\n<tr>\n<td align=\"center\">加粗</td>\n<td align=\"center\"><code>**文字加粗**</code></td>\n<td align=\"left\"><strong>文字加粗</strong></td>\n</tr>\n<tr>\n<td align=\"center\">引用</td>\n<td align=\"center\"><code>&gt; 引用文字</code></td>\n<td align=\"left\"><blockquote>引用文字</blockquote></td>\n</tr>\n<tr>\n<td align=\"center\">有序列表</td>\n<td align=\"center\"><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td>\n<td align=\"left\"><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td>\n</tr>\n<tr>\n<td align=\"center\">无序列表</td>\n<td align=\"center\"><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td>\n<td align=\"left\"><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td>\n</tr>\n<tr>\n<td align=\"center\">链接</td>\n<td align=\"center\"><code>[链接](url)</code></td>\n<td align=\"left\"><a href=\"url\">链接</a></td>\n</tr>\n<tr>\n<td align=\"center\">图片</td>\n<td align=\"center\"><code>![图片](image.jpg)</code></td>\n<td align=\"left\"><i class=\"fa fa-image\"></i></td>\n</tr>\n<tr>\n<td align=\"center\">水平线</td>\n<td align=\"center\"><code>---</code></td>\n<td align=\"left\"><hr></td>\n</tr>\n<tr>\n<td align=\"center\">代码</td>\n<td align=\"center\"><code>`code`</code></td>\n<td align=\"left\"><code>code</code></td>\n</tr>\n<tr>\n<td align=\"center\">代码块</td>\n<td align=\"center\"><code>```code snippet```</code></td>\n<td align=\"left\"><figure class=\"highlight\"><table><tbody><tr><td class=\"code\"><pre>code snippet</pre></td></tr></tbody></table></figure></td>\n</tr>\n</tbody></table>\n<div class=\"note info\">\n            <p>更多语法请参考 <a href=\"https://www.markdownguide.org/basic-syntax\">基础语法 | Markdown Guide</a> 和 <a href=\"https://www.markdownguide.org/extended-syntax\">扩展语法 | Markdown Guide</a></p>\n          </div>\n\n<h2 id=\"Hexo内置标签\"><a href=\"#Hexo内置标签\" class=\"headerlink\" title=\"Hexo内置标签\"></a>Hexo内置标签</h2><p>Markdown满足了最基本的文档编写需求，<code>标签(Tag Plugin)</code>是Hexo提供的一种快速生成特定内容的方式，用来提供更多样式和功能，例如，标准的Markdown语法中，我们无法制定图片的大小，这是我们可以使用<code>标签</code>来解决。值得一提的是，<code>标签(Tag Plugin)</code>有Plugin的属性，你可以自主编写独特的标签来满足你的需求。</p>\n<h3 id=\"1-文本居中的引用\"><a href=\"#1-文本居中的引用\" class=\"headerlink\" title=\"1.文本居中的引用\"></a>1.文本居中的引用</h3><blockquote class=\"blockquote-center\">\n            <i class=\"fa fa-quote-left\"></i>\n            <p>看，<code>centerquote</code>是这样的，俺觉得这个用处不大</p>\n\n            <i class=\"fa fa-quote-right\"></i>\n          </blockquote>\n\n<figure class=\"highlight html\"><figcaption><span>标签语法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;blockquote-center&quot;</span>&gt;</span>blah blah blah<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签方式 --&gt;</span></span><br><span class=\"line\">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 标签别名 --&gt;</span></span><br><span class=\"line\">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-代码块的进阶用法\"><a href=\"#2-代码块的进阶用法\" class=\"headerlink\" title=\"2.代码块的进阶用法\"></a>2.代码块的进阶用法</h3><figure class=\"highlight yml\"><figcaption><span>_config.xml</span><a href=\"https://github.com/lucidreamiss/\">链接地址</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">清明梦</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">&#x27;一起变好&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27;博客&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">涛桑</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>代码块进阶语法规则：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; ```[language] [title] [url] [link text]</span></span><br><span class=\"line\"><span class=\"quote\">&gt;    code snippet</span></span><br><span class=\"line\"><span class=\"quote\">&gt; ```    </span></span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>\n<li>title：代码块标题，将会显示在左上角</li>\n<li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li>\n<li>link text：链接名称，指定 url 后有效，将会显示在右上角</li>\n</ul>\n<p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</p>\n<p>如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p>\n<p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p>\n<p>如果设置语言为 diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p>\n<figure class=\"highlight diff\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> highlight:</span><br><span class=\"line\">   enable: true</span><br><span class=\"line\">   line_number: false</span><br><span class=\"line\"><span class=\"deletion\">-  auto_detect: false</span></span><br><span class=\"line\"><span class=\"addition\">+  auto_detect: true</span></span><br><span class=\"line\">   tab_replace:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-note标签\"><a href=\"#3-note标签\" class=\"headerlink\" title=\"3.note标签\"></a>3.note标签</h3><p>通过 note 标签可以为段落添加背景色，语法如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% note class %&#125;</span><br><span class=\"line\">文本内容 (支持行内标签)</span><br><span class=\"line\">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class。</p>\n<div class=\"note primary\">\n            <p>primary note tag</p>\n          </div>\n\n<div class=\"note success\">\n            <p>success note tag</p>\n          </div>\n\n<div class=\"note info\">\n            <p>info note tag</p>\n          </div>\n\n<div class=\"note warning\">\n            <p>warning note tag</p>\n          </div>\n\n<div class=\"note danger\">\n            <p>danger note tag</p>\n          </div>\n\n<div class=\"note \">\n            <p>undefined class note tag</p>\n          </div>\n\n<p>样式配置可在主题配置文件中进行设置</p>\n<figure class=\"highlight yml\"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">note:</span></span><br><span class=\"line\">  <span class=\"comment\"># Note 标签样式预设</span></span><br><span class=\"line\">  <span class=\"attr\">style:</span> <span class=\"string\">modern</span>  <span class=\"comment\"># simple | modern | flat | disabled</span></span><br><span class=\"line\">  <span class=\"attr\">icons:</span> <span class=\"literal\">false</span>  <span class=\"comment\"># 是否显示图标</span></span><br><span class=\"line\">  <span class=\"attr\">border_radius:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 圆角半径</span></span><br><span class=\"line\">  <span class=\"attr\">light_bg_offset:</span> <span class=\"number\">0</span>  <span class=\"comment\"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-label标签\"><a href=\"#4-label标签\" class=\"headerlink\" title=\"4.label标签\"></a>4.label标签</h3><p>使用label标签可以为文字添加背景色，语法如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% label [class]@text %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>支持的class种类与<code>note</code>一致。</p>\n<p>示例如下：</p>\n<blockquote><p>I heard the echo, <span class=\"label default\">from the valleys and the heart</span><br>Open to the lonely soul of <span class=\"label info\">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class=\"label warning\">swaying in the desert oasis</span><br><span class=\"label success\">I believe</span> I am<br><span class=\"label primary\">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class=\"label danger\">the load of the cumbersome</span><br>Bored</p>\n</blockquote>\n\n<p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p>\n<h3 id=\"5-button按钮\"><a href=\"#5-button按钮\" class=\"headerlink\" title=\"5.button按钮\"></a>5.button按钮</h3><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可简写为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中， 图标ID来源于 <a href=\"https://fontawesome.com/v4.7.0/icons/\">FontAwesome</a> 。</p>\n<p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% btn #, 文本 %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class=\"line\">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-\"></i>文本\n          </a></p>\n<p><a class=\"btn\" href=\"#\" title=\"标题\">\n            <i class=\"fa fa-\"></i>文本 & 标题\n          </a></p>\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-home\"></i>文本 & 图标\n          </a></p>\n<p><a class=\"btn\" href=\"#\">\n            <i class=\"fa fa-home fa-fw fa-lg\"></i>文本 & 大图标 (固定宽度)\n          </a></p>\n\n<h3 id=\"6-tab标签\"><a href=\"#6-tab标签\" class=\"headerlink\" title=\"6.tab标签\"></a>6.tab标签</h3><p>tab标签用于快速创建tab选项卡，语法如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class=\"line\">  标签页内容（支持行内标签）</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- endtab --&gt;</span></span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li>\n<li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li>\n<li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li>\n<li>icon: 在标签页标题中添加Font awesome图标</li>\n</ul>\n<p>使用示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% tabs Tab标签列表 %&#125;</span><br><span class=\"line\">  &lt;!-- tab 标签页1 --&gt;</span><br><span class=\"line\">    标签页1文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页2 --&gt;</span><br><span class=\"line\">    标签页2文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">  &lt;!-- tab 标签页3 --&gt;</span><br><span class=\"line\">    标签页3文本内容</span><br><span class=\"line\">  &lt;!-- endtab --&gt;</span><br><span class=\"line\">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tabs\" id=\"tab标签列表\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a href=\"#tab标签列表-1\">标签页1</a></li><li class=\"tab\"><a href=\"#tab标签列表-2\">标签页2</a></li><li class=\"tab\"><a href=\"#tab标签列表-3\">标签页3</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"tab标签列表-1\"><p>  标签页1文本内容</p></div><div class=\"tab-pane\" id=\"tab标签列表-2\"><p>  标签页2文本内容</p></div><div class=\"tab-pane\" id=\"tab标签列表-3\"><p>  标签页3文本内容</p></div></div></div>\n\n<h3 id=\"7-引用站内链接\"><a href=\"#7-引用站内链接\" class=\"headerlink\" title=\"7.引用站内链接\"></a>7.引用站内链接</h3><p>可以通过如下语法引入站内文章的地址或链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path slug %&#125;</span><br><span class=\"line\">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p>\n<p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p>\n<p>如以下标签将会生成 <code>&#123;% post_path hexo-writing-skills %&#125;</code></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_path hexo-writing-skills %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而以下标签则会生成 <a href=\"/2022/01/03/hexo-writing-skills/\" title=\"链接标题\">链接标题</a></p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% post_link hexo-writing-skills 链接标题 %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p>\n<h3 id=\"8-插入Gist\"><a href=\"#8-插入Gist\" class=\"headerlink\" title=\"8.插入Gist\"></a>8.插入Gist</h3><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>gist_id: Gist仓库页面url中最后一段随机字符串</li>\n<li>filename: Gist中的文件名</li>\n</ul>\n<p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p>\n<p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p>\n<div class=\"note warning\">\n            <p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p>\n          </div>\n\n<h2 id=\"插入多媒体\"><a href=\"#插入多媒体\" class=\"headerlink\" title=\"插入多媒体\"></a>插入多媒体</h2><h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>Markdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。</p>\n<p>所以在Markdown中插入一张图片要分为以下几步来进行：</p>\n<ol>\n<li>将图片资源上传到图床中</li>\n<li>获取图片外链</li>\n<li>插入到Markdown文档中</li>\n</ol>\n<p>对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：</p>\n<ul>\n<li><p>图床是否提供了便捷的图形化管理工具用于图片的上传下载？</p>\n<p>如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/hexo-writing-skills/cos_preview.png\" alt=\"腾讯云COS客户端界面截图\" title=\"腾讯云COS客户端界面截图\"></p>\n</li>\n<li><p>是否能够方便的插入到Markdown文档中？</p>\n<p>这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。</p>\n<p>其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。</p>\n</li>\n</ul>\n<div class=\"note info\">\n            <p>本站使用腾讯云COS提供对象存储服务。</p>\n          </div>\n\n<h3 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h3><p>在网页版云音乐中找到歌曲，点击生成外链播放器：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png\" alt=\"获取歌曲外链\" title=\"获取歌曲外链\"></p>\n<p>根据个人喜好选择播放器尺寸和播放模式：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png\" alt=\"获取插件代码\" title=\"获取插件代码\"></p>\n<p>将获取到的 <code>iframe</code> 代码添加到页面中，默认样式如下：</p>\n<div class=\"fluid-vids\" style=\"position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"329\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66\" style=\"width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;\">\n</iframe></div>\n\n<p>播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 <code>iframe</code> 在渲染的时候被处理过，外层包了一个类名为 <code>fluid-vids</code> 的 <code>div</code> 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 <code>music.163.com</code> 域名包含在了处理逻辑内，只需要将该行删除即可。</p>\n<figure class=\"highlight js\"><figcaption><span>themes\\next\\source\\js\\src\\utils.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">SUPPORTED_PLAYERS</span> = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;www.youtube.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;player.vimeo.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;player.youku.com&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//&#x27;music.163.com&#x27;,</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;www.tudou.com&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 <code>iframe</code> 包在 <code>&lt;center&gt;</code> 标签内。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;no&quot;</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">329</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<center>\n  <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=329 height=86 src=\"//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66\">\n  </iframe>\n</center>\n\n<div class=\"note warning\">\n            <p>其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 <code>&lt;center&gt;</code> <code>&lt;strong&gt;</code> 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。</p>\n          </div>\n\n<p>如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 <code>iframe</code> 元素前后是否多了 <code>&lt;br&gt;</code> 元素：</p>\n<p><img src=\"http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png\" alt=\"播放器前后空行代码\" title=\"播放器前后空行代码\"></p>\n<p>造成这样的原因是Markdown渲染引擎把 <code>&lt;center&gt;</code> 标签和 <code>&lt;iframe&gt;</code> 标签之间的回车当作 <code>&lt;br&gt;</code> 来处理了。参考链接: <a href=\"https://github.com/hexojs/hexo/issues/1388\">Hexo issues #1388</a></p>\n<p>简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。</p>\n<p>另外一种方案是在站点配置文件中添加如下代码：</p>\n<figure class=\"highlight yaml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">gfm:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">breaks:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>重启服务器之后更改才会生效。</p>\n<div class=\"note warning\">\n            <p>网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。</p>\n          </div>\n\n<h3 id=\"Aplayer音频播放器\"><a href=\"#Aplayer音频播放器\" class=\"headerlink\" title=\"Aplayer音频播放器\"></a>Aplayer音频播放器</h3><p><a href=\"https://aplayer.js.org/#/\">APlayer</a>是由 <a href=\"https://github.com/DIYgod\">DIYgod</a> 编写的HTML5音频播放器，提供了另一种音频播放方案。</p>\n<div class=\"note \">\n            <p>了解诞生背景： <a href=\"https://diygod.me/2167/\">APlayer - 送给小狐狸和小兔子的 HTML5 播放器</a></p>\n          </div>\n\n<p>借助 <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer\">hexo-tag-aplayer</a> 插件，可以通过标签的形式方便快捷的插入音频组件。</p>\n<p>在站点根目录下执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>\n\n<p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，各参数意义如下：</p>\n<ul>\n<li>title: 曲目标题</li>\n<li>author: 曲目作者</li>\n<li>url: 音乐文件 URL 地址</li>\n<li>picture_url: (可选) 音乐对应的图片地址</li>\n<li>narrow: （可选）播放器袖珍风格</li>\n<li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>\n<li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li>\n<li>lrc:xxx: （可选）歌词文件 URL 地址</li>\n</ul>\n<p>示例效果如下：</p>\n\n        <div id=\"aplayer-wyTbjqFe\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\">\n            <pre class=\"aplayer-lrc-content\"></pre>\n        </div>\n        <script>\n          var ap = new APlayer({\n            element: document.getElementById(\"aplayer-wyTbjqFe\"),\n            narrow: false,\n            autoplay: false,\n            showlrc: 3,\n            music: {\n              title: \"前前世世 -《君の名は。》\",\n              author: \"RADWIMPS\",\n              url: \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3\",\n              pic: \"http://pic.5577.com/up/2016-12/201612891712576.png\",\n              lrc: \"https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc\"\n            }\n          });\n          window.aplayers || (window.aplayers = []);\n          window.aplayers.push(ap);\n        </script>\n\n<p>当开启 Hexo 的 <a href=\"https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9\">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则</p>\n<figure class=\"highlight css\"><figcaption><span>themes\\next\\source\\css\\_custom\\custom.styl</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Aplayer 播放器居中</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.aplayer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info\">\n            <p>插入播放列表功能请参考： <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist\">hexo-tag-aplayer | With playlist</a></p>\n          </div>"},{"title":"存储器结构层次","date":"2022-01-24T07:48:50.000Z","description":"你知道吗，位于CPU中的各类寄存器、CPU cache、内存 SSD硬盘、机械硬盘都是冯诺依曼模型中的存储单元，为什么设计了这么多存储器呢，他们之间的关系又是什么，存储器是怎么存储数据的，又是怎么提供给CPU使用的呢？","_content":"\n## 存储器层次结构\n\n存储器通常分成以下几个级别:\n- 寄存器\n- CPU Cache\n- 内存\n- SSD/HDD硬盘\n\n<img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg\" width=200/>\n\n### 寄存器\n\n最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如\n\n- 32位CPU中大多数寄存器可以存储**4**个字节\n- 64位CPU中大多数可以存储**8**个字节\n\n寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。\nCPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉长指令的处理周期，从而给用户感觉很卡的样子。\n\n{% note info %}\n**时钟周期**：CPU的硬件参数都会有**GHz**这个参数，比如一个1GHz的CPU，指的是时钟频率为1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。\n对于CPU来说，一个时钟周期CPU仅能完成一个最基本的动作，时钟频率越高，则时钟周期越短，那么CPU工作的速度也就越快。\n{% endnote %}\n\n### CPU Cache\n\nCPU Cache 使用**SRAM（静态随机存储器）**芯片。\n{%note info %}\nSRAM(静态随机存储器)：一个bit数据，通常需要6根晶体管保存，SRAM存储密度不高，但访问速度很快，之所以称为静态存储器，是因为只要有电，数据就会一直保持存在，停电消失。\n{% endnote %}\n\nCPU Cache分为L1、L2、L3、这样的三层高速缓存。\n\n![CPU三级高速缓存](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/cpu_cache.jpg)\n\n#### L1高速缓存\n\nL1高速缓存的访问速度几乎和寄存器一样快，通常只需要`2-4`个时钟周期，而大小在几十KB到几百KB不等。\n每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存与数据缓存。\n\n在Linux系统中，可以查看CPU L1 Cache **数据**缓存的容量大小：\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/size\n32K\n```\n\nL1 Cache **指令**缓存的容量大小：\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index1/size\n32K\n```\n\n#### L2高速缓存\n\nL2高速缓存同样每个CPU核心都有，但是L2高速缓存位置离CPU更远，大小比L1更大，访问速度更慢，速度在10~20个时钟周期。\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index2/size\n256K\n```\n\n#### L3高速缓存\n\n速度更慢，20~60个时钟周期；容量更大，几MB到几十MB。\nL3高速缓存通常多个CPU核心共用，*这里会存在一些并发问题，后续我们来看看CPU是如何解决该问题的*\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index3/size \n3072K\n```\n\n### 内存\n\n内存使用**DRAM（动态随机存取存储器）**保存数据。\n相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。\nDRAM存储一个bit的数据只需要一个电容和一个晶体管即可，但是因为数据会被存储在电容里，而电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为**动态**存储器的原因，只有不断刷新，数据才会被存储起来。\nDRAM的访问电路与刷新电路都更复杂，所以访问的速度会更慢，内存速度大概在*200~300*个时钟周期。\n\n### SSD/HDD硬盘\n\nSSD即固态硬盘，结构与内存类似，优点是断电数据也存在，内存的读写速度大概比SSD快10~1000倍。\n\nHDD即传统的机械硬盘，使用物理读写的方式，所以速度很慢，大概比内存慢10w倍左右，差不多已经被SSD代替了。\n\n\n## 存储器的层次关系\n\n现代的一台计算机，都用上了CPU Cache、内存、SSD/HDD硬盘这些存储设备了。\n\n![存储器的层次关系](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.webp)\n\n每个存储器只和与他相邻的一层存储器设备打交道。","source":"_posts/memory-hierarchy.md","raw":"---\ntitle: 存储器结构层次\ndate: 2022-01-24 15:48:50\ntags: [操作系统, 存储器]\ndescription: 你知道吗，位于CPU中的各类寄存器、CPU cache、内存 SSD硬盘、机械硬盘都是冯诺依曼模型中的存储单元，为什么设计了这么多存储器呢，他们之间的关系又是什么，存储器是怎么存储数据的，又是怎么提供给CPU使用的呢？\n---\n\n## 存储器层次结构\n\n存储器通常分成以下几个级别:\n- 寄存器\n- CPU Cache\n- 内存\n- SSD/HDD硬盘\n\n<img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg\" width=200/>\n\n### 寄存器\n\n最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如\n\n- 32位CPU中大多数寄存器可以存储**4**个字节\n- 64位CPU中大多数可以存储**8**个字节\n\n寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。\nCPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉长指令的处理周期，从而给用户感觉很卡的样子。\n\n{% note info %}\n**时钟周期**：CPU的硬件参数都会有**GHz**这个参数，比如一个1GHz的CPU，指的是时钟频率为1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。\n对于CPU来说，一个时钟周期CPU仅能完成一个最基本的动作，时钟频率越高，则时钟周期越短，那么CPU工作的速度也就越快。\n{% endnote %}\n\n### CPU Cache\n\nCPU Cache 使用**SRAM（静态随机存储器）**芯片。\n{%note info %}\nSRAM(静态随机存储器)：一个bit数据，通常需要6根晶体管保存，SRAM存储密度不高，但访问速度很快，之所以称为静态存储器，是因为只要有电，数据就会一直保持存在，停电消失。\n{% endnote %}\n\nCPU Cache分为L1、L2、L3、这样的三层高速缓存。\n\n![CPU三级高速缓存](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/cpu_cache.jpg)\n\n#### L1高速缓存\n\nL1高速缓存的访问速度几乎和寄存器一样快，通常只需要`2-4`个时钟周期，而大小在几十KB到几百KB不等。\n每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存与数据缓存。\n\n在Linux系统中，可以查看CPU L1 Cache **数据**缓存的容量大小：\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index0/size\n32K\n```\n\nL1 Cache **指令**缓存的容量大小：\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index1/size\n32K\n```\n\n#### L2高速缓存\n\nL2高速缓存同样每个CPU核心都有，但是L2高速缓存位置离CPU更远，大小比L1更大，访问速度更慢，速度在10~20个时钟周期。\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index2/size\n256K\n```\n\n#### L3高速缓存\n\n速度更慢，20~60个时钟周期；容量更大，几MB到几十MB。\nL3高速缓存通常多个CPU核心共用，*这里会存在一些并发问题，后续我们来看看CPU是如何解决该问题的*\n\n```shell linux\n$ cat /sys/devices/system/cpu/cpu0/cache/index3/size \n3072K\n```\n\n### 内存\n\n内存使用**DRAM（动态随机存取存储器）**保存数据。\n相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。\nDRAM存储一个bit的数据只需要一个电容和一个晶体管即可，但是因为数据会被存储在电容里，而电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为**动态**存储器的原因，只有不断刷新，数据才会被存储起来。\nDRAM的访问电路与刷新电路都更复杂，所以访问的速度会更慢，内存速度大概在*200~300*个时钟周期。\n\n### SSD/HDD硬盘\n\nSSD即固态硬盘，结构与内存类似，优点是断电数据也存在，内存的读写速度大概比SSD快10~1000倍。\n\nHDD即传统的机械硬盘，使用物理读写的方式，所以速度很慢，大概比内存慢10w倍左右，差不多已经被SSD代替了。\n\n\n## 存储器的层次关系\n\n现代的一台计算机，都用上了CPU Cache、内存、SSD/HDD硬盘这些存储设备了。\n\n![存储器的层次关系](https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.webp)\n\n每个存储器只和与他相邻的一层存储器设备打交道。","slug":"memory-hierarchy","published":1,"updated":"2022-01-24T07:48:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54ro3t50008n5q7drh6c15f","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"存储器层次结构\"><a href=\"#存储器层次结构\" class=\"headerlink\" title=\"存储器层次结构\"></a>存储器层次结构</h2><p>存储器通常分成以下几个级别:</p>\n<ul>\n<li>寄存器</li>\n<li>CPU Cache</li>\n<li>内存</li>\n<li>SSD/HDD硬盘</li>\n</ul>\n<img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg\" width=200/>\n\n<h3 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h3><p>最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如</p>\n<ul>\n<li>32位CPU中大多数寄存器可以存储<strong>4</strong>个字节</li>\n<li>64位CPU中大多数可以存储<strong>8</strong>个字节</li>\n</ul>\n<p>寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。<br>CPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉长指令的处理周期，从而给用户感觉很卡的样子。</p>\n<div class=\"note info\">\n            <p><strong>时钟周期</strong>：CPU的硬件参数都会有<strong>GHz</strong>这个参数，比如一个1GHz的CPU，指的是时钟频率为1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。<br>对于CPU来说，一个时钟周期CPU仅能完成一个最基本的动作，时钟频率越高，则时钟周期越短，那么CPU工作的速度也就越快。</p>\n          </div>\n\n<h3 id=\"CPU-Cache\"><a href=\"#CPU-Cache\" class=\"headerlink\" title=\"CPU Cache\"></a>CPU Cache</h3><p>CPU Cache 使用<strong>SRAM（静态随机存储器）</strong>芯片。</p>\n<div class=\"note info\">\n            <p>SRAM(静态随机存储器)：一个bit数据，通常需要6根晶体管保存，SRAM存储密度不高，但访问速度很快，之所以称为静态存储器，是因为只要有电，数据就会一直保持存在，停电消失。</p>\n          </div>\n\n<p>CPU Cache分为L1、L2、L3、这样的三层高速缓存。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/cpu_cache.jpg\" alt=\"CPU三级高速缓存\"></p>\n<h4 id=\"L1高速缓存\"><a href=\"#L1高速缓存\" class=\"headerlink\" title=\"L1高速缓存\"></a>L1高速缓存</h4><p>L1高速缓存的访问速度几乎和寄存器一样快，通常只需要<code>2-4</code>个时钟周期，而大小在几十KB到几百KB不等。<br>每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存与数据缓存。</p>\n<p>在Linux系统中，可以查看CPU L1 Cache <strong>数据</strong>缓存的容量大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/size</span></span><br><span class=\"line\">32K</span><br></pre></td></tr></table></figure>\n\n<p>L1 Cache <strong>指令</strong>缓存的容量大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index1/size</span></span><br><span class=\"line\">32K</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"L2高速缓存\"><a href=\"#L2高速缓存\" class=\"headerlink\" title=\"L2高速缓存\"></a>L2高速缓存</h4><p>L2高速缓存同样每个CPU核心都有，但是L2高速缓存位置离CPU更远，大小比L1更大，访问速度更慢，速度在10~20个时钟周期。</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index2/size</span></span><br><span class=\"line\">256K</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"L3高速缓存\"><a href=\"#L3高速缓存\" class=\"headerlink\" title=\"L3高速缓存\"></a>L3高速缓存</h4><p>速度更慢，20~60个时钟周期；容量更大，几MB到几十MB。<br>L3高速缓存通常多个CPU核心共用，<em>这里会存在一些并发问题，后续我们来看看CPU是如何解决该问题的</em></p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index3/size</span> </span><br><span class=\"line\">3072K</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>内存使用<strong>DRAM（动态随机存取存储器）</strong>保存数据。<br>相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。<br>DRAM存储一个bit的数据只需要一个电容和一个晶体管即可，但是因为数据会被存储在电容里，而电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为<strong>动态</strong>存储器的原因，只有不断刷新，数据才会被存储起来。<br>DRAM的访问电路与刷新电路都更复杂，所以访问的速度会更慢，内存速度大概在<em>200~300</em>个时钟周期。</p>\n<h3 id=\"SSD-HDD硬盘\"><a href=\"#SSD-HDD硬盘\" class=\"headerlink\" title=\"SSD/HDD硬盘\"></a>SSD/HDD硬盘</h3><p>SSD即固态硬盘，结构与内存类似，优点是断电数据也存在，内存的读写速度大概比SSD快10~1000倍。</p>\n<p>HDD即传统的机械硬盘，使用物理读写的方式，所以速度很慢，大概比内存慢10w倍左右，差不多已经被SSD代替了。</p>\n<h2 id=\"存储器的层次关系\"><a href=\"#存储器的层次关系\" class=\"headerlink\" title=\"存储器的层次关系\"></a>存储器的层次关系</h2><p>现代的一台计算机，都用上了CPU Cache、内存、SSD/HDD硬盘这些存储设备了。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.webp\" alt=\"存储器的层次关系\"></p>\n<p>每个存储器只和与他相邻的一层存储器设备打交道。</p>\n","site":{"data":{}},"length":1634,"excerpt":"存储器层次结构\n存储器通常分成以下几个级别:\n\n * 寄存器\n * CPU Cache\n * 内存\n * SSD/HDD硬盘\n\n寄存器\n最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如\n\n * 32位CPU中大多数寄存器可以存储4个字节\n * 64位CPU中大多数可以存储8个字节\n\n寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。\nCPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉","more":"<h2 id=\"存储器层次结构\"><a href=\"#存储器层次结构\" class=\"headerlink\" title=\"存储器层次结构\"></a>存储器层次结构</h2><p>存储器通常分成以下几个级别:</p>\n<ul>\n<li>寄存器</li>\n<li>CPU Cache</li>\n<li>内存</li>\n<li>SSD/HDD硬盘</li>\n</ul>\n<img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg\" width=200/>\n\n<h3 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h3><p>最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如</p>\n<ul>\n<li>32位CPU中大多数寄存器可以存储<strong>4</strong>个字节</li>\n<li>64位CPU中大多数可以存储<strong>8</strong>个字节</li>\n</ul>\n<p>寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。<br>CPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉长指令的处理周期，从而给用户感觉很卡的样子。</p>\n<div class=\"note info\">\n            <p><strong>时钟周期</strong>：CPU的硬件参数都会有<strong>GHz</strong>这个参数，比如一个1GHz的CPU，指的是时钟频率为1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。<br>对于CPU来说，一个时钟周期CPU仅能完成一个最基本的动作，时钟频率越高，则时钟周期越短，那么CPU工作的速度也就越快。</p>\n          </div>\n\n<h3 id=\"CPU-Cache\"><a href=\"#CPU-Cache\" class=\"headerlink\" title=\"CPU Cache\"></a>CPU Cache</h3><p>CPU Cache 使用<strong>SRAM（静态随机存储器）</strong>芯片。</p>\n<div class=\"note info\">\n            <p>SRAM(静态随机存储器)：一个bit数据，通常需要6根晶体管保存，SRAM存储密度不高，但访问速度很快，之所以称为静态存储器，是因为只要有电，数据就会一直保持存在，停电消失。</p>\n          </div>\n\n<p>CPU Cache分为L1、L2、L3、这样的三层高速缓存。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/cpu_cache.jpg\" alt=\"CPU三级高速缓存\"></p>\n<h4 id=\"L1高速缓存\"><a href=\"#L1高速缓存\" class=\"headerlink\" title=\"L1高速缓存\"></a>L1高速缓存</h4><p>L1高速缓存的访问速度几乎和寄存器一样快，通常只需要<code>2-4</code>个时钟周期，而大小在几十KB到几百KB不等。<br>每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存与数据缓存。</p>\n<p>在Linux系统中，可以查看CPU L1 Cache <strong>数据</strong>缓存的容量大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/size</span></span><br><span class=\"line\">32K</span><br></pre></td></tr></table></figure>\n\n<p>L1 Cache <strong>指令</strong>缓存的容量大小：</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index1/size</span></span><br><span class=\"line\">32K</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"L2高速缓存\"><a href=\"#L2高速缓存\" class=\"headerlink\" title=\"L2高速缓存\"></a>L2高速缓存</h4><p>L2高速缓存同样每个CPU核心都有，但是L2高速缓存位置离CPU更远，大小比L1更大，访问速度更慢，速度在10~20个时钟周期。</p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index2/size</span></span><br><span class=\"line\">256K</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"L3高速缓存\"><a href=\"#L3高速缓存\" class=\"headerlink\" title=\"L3高速缓存\"></a>L3高速缓存</h4><p>速度更慢，20~60个时钟周期；容量更大，几MB到几十MB。<br>L3高速缓存通常多个CPU核心共用，<em>这里会存在一些并发问题，后续我们来看看CPU是如何解决该问题的</em></p>\n<figure class=\"highlight shell\"><figcaption><span>linux</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /sys/devices/system/cpu/cpu0/cache/index3/size</span> </span><br><span class=\"line\">3072K</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><p>内存使用<strong>DRAM（动态随机存取存储器）</strong>保存数据。<br>相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。<br>DRAM存储一个bit的数据只需要一个电容和一个晶体管即可，但是因为数据会被存储在电容里，而电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为<strong>动态</strong>存储器的原因，只有不断刷新，数据才会被存储起来。<br>DRAM的访问电路与刷新电路都更复杂，所以访问的速度会更慢，内存速度大概在<em>200~300</em>个时钟周期。</p>\n<h3 id=\"SSD-HDD硬盘\"><a href=\"#SSD-HDD硬盘\" class=\"headerlink\" title=\"SSD/HDD硬盘\"></a>SSD/HDD硬盘</h3><p>SSD即固态硬盘，结构与内存类似，优点是断电数据也存在，内存的读写速度大概比SSD快10~1000倍。</p>\n<p>HDD即传统的机械硬盘，使用物理读写的方式，所以速度很慢，大概比内存慢10w倍左右，差不多已经被SSD代替了。</p>\n<h2 id=\"存储器的层次关系\"><a href=\"#存储器的层次关系\" class=\"headerlink\" title=\"存储器的层次关系\"></a>存储器的层次关系</h2><p>现代的一台计算机，都用上了CPU Cache、内存、SSD/HDD硬盘这些存储设备了。</p>\n<p><img src=\"https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.webp\" alt=\"存储器的层次关系\"></p>\n<p>每个存储器只和与他相邻的一层存储器设备打交道。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl54ro3sx0001n5q7ad2jdou3","tag_id":"cl54ro3t20004n5q7cja47ohs","_id":"cl54ro3t8000cn5q742ubdnmz"},{"post_id":"cl54ro3sx0001n5q7ad2jdou3","tag_id":"cl54ro3t60009n5q7d0y74bf7","_id":"cl54ro3t8000dn5q7ep5vdav0"},{"post_id":"cl54ro3sx0001n5q7ad2jdou3","tag_id":"cl54ro3t6000an5q703dxexvx","_id":"cl54ro3t8000fn5q78o487nu3"},{"post_id":"cl54ro3t00003n5q768yv1ldv","tag_id":"cl54ro3t20004n5q7cja47ohs","_id":"cl54ro3t9000hn5q76x6a7nns"},{"post_id":"cl54ro3t00003n5q768yv1ldv","tag_id":"cl54ro3t60009n5q7d0y74bf7","_id":"cl54ro3t9000in5q70sp6gin1"},{"post_id":"cl54ro3t50007n5q77t494al2","tag_id":"cl54ro3t8000gn5q7d2zs82s0","_id":"cl54ro3t9000ln5q76ayu6f75"},{"post_id":"cl54ro3t50007n5q77t494al2","tag_id":"cl54ro3t9000jn5q7fras8740","_id":"cl54ro3t9000mn5q79gcvhcn7"},{"post_id":"cl54ro3t50008n5q7drh6c15f","tag_id":"cl54ro3t20004n5q7cja47ohs","_id":"cl54ro3t9000nn5q768r7fc5o"},{"post_id":"cl54ro3t50008n5q7drh6c15f","tag_id":"cl54ro3t9000kn5q75jce2zn2","_id":"cl54ro3ta000on5q7d1i80vcz"}],"Tag":[{"name":"操作系统","_id":"cl54ro3t20004n5q7cja47ohs"},{"name":"CPU","_id":"cl54ro3t60009n5q7d0y74bf7"},{"name":"CPU Cache","_id":"cl54ro3t6000an5q703dxexvx"},{"name":"Hexo","_id":"cl54ro3t8000gn5q7d2zs82s0"},{"name":"Markdown","_id":"cl54ro3t9000jn5q7fras8740"},{"name":"存储器","_id":"cl54ro3t9000kn5q75jce2zn2"}]}}