<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CPU Cache</title>
    <url>/2022/07/02/cpu-cache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CPU-Cache的数据结构与读取过程"><a href="#CPU-Cache的数据结构与读取过程" class="headerlink" title="CPU Cache的数据结构与读取过程"></a>CPU Cache的数据结构与读取过程</h2><p><code>CPU Cache</code>的数据是从内存中读取过来的，它是以一小块一小块读取数据的，而不是按照单个元素来读取数据的，在CPU Cache中，这样一小块一小块的数据，被称为<code>Cache Line</code> (缓存块)。Cache Line对应到内存的那一小块数据称为<code>Block</code>(内存块)。<br>可以使用以下命令查看<code>Cache Line</code>的大小:</p>
<figure class="highlight shell"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/coherency_line_size</span></span><br><span class="line">64</span><br></pre></td></tr></table></figure>

<p>64即64字节，即<code>L1 CPU Cache</code>一次载入的数据大小为64字节。<br>比如，有一个<code>int array[100]</code>的数组，当载入array[0]时，也会同时将array[1]~array[15]载入，作为一个Cache Line存入到CPU Cache中，那么当下次再访问这些元素时，就可以直接在内存中读取了，从而大大提高了CPU读取数据的性能。<br>事实上，CPU读取数据的时候，无论数据是否存放到Cache中，CPU都是先访问Cache，只有当Cache中找不到数据后，才会去访问内存，并把内存中的数据读入到Cache中，CPU再从Cache中获取数据，这样的交互方式也满足存储器的层次关系，即每层存储器只与他的上一层和下一层交互。</p>
<p>那么CPU是怎么知道要访问的内存数据缓存到了CPU Cache里面的呢？</p>
<h3 id="直接映射Cache"><a href="#直接映射Cache" class="headerlink" title="直接映射Cache"></a>直接映射Cache</h3><p>我们先以直接映射为例，看看CPU Cache的数据结构和访问逻辑。<br><code>直接映射Cache</code>采用的策略就是把<code>Block（内存块）</code>的地址始终映射在一个<code>Cache Line(缓存块)</code>的地址上，映射关系也简单粗暴的使用<strong>取模运算</strong>。<br>如下图，地址为<strong>7</strong>的<code>Cache Line（缓存块）</code>可以映射地址为<strong>7、15、23、31</strong>的<code>Block（内存块）</code></p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/cpu-cache/%E6%B1%82%E6%A8%A1%E6%98%A0%E5%B0%84%E7%AD%96%E7%95%A5.webp" alt="求模运算策略"></p>
<p>我们也能发现，<code>Block</code>和<code>Cache Line</code>是多对一的，这里就需要特定的标识来区别不同的<code>Block</code>，这里特定的标识被称为<code>Tag(组标记)</code>。<code>Tag</code>会记录当前存储的数据对应哪个<code>Block</code>。除了<code>Tag</code>外，Cache Line中还有两个信息：</p>
<ul>
<li><code>Data</code>，从内存中实际加载进来的数据。</li>
<li><code>Valid bit（有效位）</code>，用来标记对应的CPU Line中的数据是否有效，0表示该数据失效，此时CPU会重新访问内存来加载数据。</li>
</ul>
<p>CPU在从CPU Cache读取数据的时候，仅会读取<code>Cache Line</code>中一部分数据，这部分数据片段称为<code>Word（字）</code>，怎么在<code>Cache Line</code>中获取<code>Word</code>呢，则需要一个offset（偏移量）。</p>
<p>因此，一个内存的访问地址，包括<code>Tag（组标记）、CPU Cache地址、Offset（偏移量）</code>这三种信息，靠这三个信息就可以取得CPU想要的数据。</p>
<p>那么CPU Cache的数据结构就包括<code>地址、Valid bit（有效位）、Tag（组标记）、Data（数据）</code>组成。</p>
<h3 id="全相连Cache"><a href="#全相连Cache" class="headerlink" title="全相连Cache"></a>全相连Cache</h3><h3 id="组相连Cache"><a href="#组相连Cache" class="headerlink" title="组相连Cache"></a>组相连Cache</h3><h2 id="CPU-Cache的数据写入过程"><a href="#CPU-Cache的数据写入过程" class="headerlink" title="CPU Cache的数据写入过程"></a>CPU Cache的数据写入过程</h2><p>上面我们聊了CPU是怎么从CPU Cache中读数据的，接下来我们聊下CPU是怎么通过CPU Cache写数据的。</p>
<p>我们知道，<code>CPU Cache</code>的职责是为<code>内存</code>缓冲数据以便供<code>CPU</code>使用的，当CPU想要向<code>内存</code>写入数据的时候，也必须经过CPU Cache这一层，再由CPU Cache把数据同步到内存里，那么同步时机是什么时候呢？下面有两种方式：</p>
<ul>
<li>写直达，把数据直接同时写入到内存与Cache中。<ul>
<li>当CPU Cache中有数据时，更新CPU Cache的数据，再把CPU Cache的数据同步到内存中。</li>
<li>当CPU Cache没有数据时，直接把数据写入到内存中。</li>
</ul>
</li>
<li>写回</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>CPU</tag>
        <tag>CPU Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU是怎么运行程序的？</title>
    <url>/2022/01/23/how-cpu-execute/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你知道<code>a = 1 + 2</code>在CPU是怎么执行的吗？32位和64位的操作系统有什么区别？64位的软件可以在32位的操作系统上面运行吗？</p>
<h2 id="图灵机的工作方式"><a href="#图灵机的工作方式" class="headerlink" title="图灵机的工作方式"></a>图灵机的工作方式</h2><p>要想了解程序是怎么执行的，我们先来看下图灵机的工作方式。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/how-to-execute-turing.webp" alt="图灵机"></p>
<p>图灵的基本思想是用机器来模拟人们用纸笔进行数学运算的过程，他把这样的过程看作下列两种简单的动作：<br>1、在纸上写上或擦除某个符号；<br>2、把注意力从纸的一个位置移动到另一个位置。<br>而在每个阶段，人要决定下一步的动作，依赖于 (1) 此人当前所关注的纸上某个位置的符号和(2) 此人当前思维的状态。</p>
<p>那么我们来看下图灵机是怎么执行<code>1 + 2</code>的。</p>
<ul>
<li>首先，在纸上写入「1、2、+」这三个字符，并读写头停放在1字符对应的格子上。</li>
<li>接着，读写头将1写入到存储设备中</li>
<li>读写头移动到下一格，读取2到存储设备中</li>
<li>读写头移动到下一格，读取+，判断加未运算符指令，变将存储设备中的1和2相加，得到3，并将3写入到存储设备中</li>
<li>读写头移动到下一格，将存储设备中的3写入到此格。</li>
</ul>
<p>现代计算机的工作方式与图灵机执行<code>1+2</code>的工作方式基本一致，我们来看下冯诺依曼模型。</p>
<h2 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h2><p>冯诺依曼遵循图灵机的设计，使用电子元件构造计算机，约定用二进制进行计算和存储，并定义了<em>冯诺依曼模型</em>。</p>
<p>冯诺依曼模型定义了计算机的基本结构有五个部分，<strong>运算器</strong>、<strong>控制器</strong>、 <strong>存储器</strong>、<strong>输入设备</strong>、<strong>输出设备</strong>。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/Von_Neumann_architecture.svg" alt="冯诺依曼模型"></p>
<p>计算器、控制器位于CPU中，并使用总线与存储器和输入/输出设备完成交互。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp" alt="冯诺依曼模型"></p>
<h3 id="寄存器是什么"><a href="#寄存器是什么" class="headerlink" title="寄存器是什么"></a>寄存器是什么</h3><p>看上面的冯诺依曼模型中，CPU中有个寄存器的角色，他是用来干嘛的呢？我们知道CPU中放着控制单元与逻辑运算单元，而数据需要依靠总线与存储单元、输入输出单元交互来获得，依靠总线传输数据会增加运算时间，那么就需要将正在计算的数据存放到寄存器中，通过减少与总线的交互来提升计算速度。根据存储的数据不同，常见的寄存器有以下几种。</p>
<ul>
<li>通用寄存器，存放进行运算的数据。</li>
<li>程序计数器，存放CPU要执行的下一条指令的地址。</li>
<li>指令寄存器，存放程序计数器指向的指令。</li>
</ul>
<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>总线用于CPU与内存以及其他设备之前的通信。分为以下三种：</p>
<ul>
<li>地址总线，用于指定CPU将要操作的内存地址。</li>
<li>数据总线，用于读写内存的数据。</li>
<li>控制总线，用于发送和接收信号，比如中断、设备复位等。CPU收到信号后自然进行相应，也需要控制总线。</li>
</ul>
<p>当CPU读写内存时，首先通过<strong>地址总线</strong>来指定内存地址，然后通过<strong>控制总线</strong>来控制读或写命令，最后通过<strong>数据总线</strong>来传输数据。</p>
<h2 id="线路位宽与CPU位宽"><a href="#线路位宽与CPU位宽" class="headerlink" title="线路位宽与CPU位宽"></a>线路位宽与CPU位宽</h2><p>CPU通过总线与内存进行交互，那么总线是怎么传输数据的呢？其实就是操作电压，低电压为0，高电压为1，以此来表达二进制数据，从而完成数据传输，那么表示一个11010的信号则需要5条线路并行传输，线路的条数称为位宽，一般也对应CPU位宽。</p>
<p>CPU想要操作内存地址就需要地址总线。</p>
<p>假设有线路位宽为5，此时CPU想访问内存地址6，那么则通过地址总线传输00110即可，如果此时CPU想访问128，那么传输啥都没用，位宽为5，寻址范围只能在0-31上，可见，位宽决定了CPU能操作的内存大小，32位CPU只能操作<code>2^32</code>(4G)大的内存。</p>
<div class="note ">
            <p>所以不要给32位CPU安装8G内存条哦，4G就够了</p>
          </div>

<p>线路位宽决定了数据传输的能力，那么CPU位宽呢？</p>
<p>看冯诺依曼模型可知，CPU放着控制单元与逻辑运算单元，CPU位宽决定了这里的计算能力，32位的CPU没法直接加和两个64位大小的数字，需要分高低位加和再组装，而64位计算机则可以直接对64位数字加和，那么CPU位宽则决定了一次能计算多少字节的数据。</p>
<ul>
<li>32位CPU一次可以计算4个字节；</li>
<li>64位CPU一次可以计算8个字节；</li>
</ul>
<div class="note ">
            <p>如果计算的数额不超过32位，此时32位CPU与64位CPU其实没差别</p>
          </div>

<h2 id="程序执行的基本过程"><a href="#程序执行的基本过程" class="headerlink" title="程序执行的基本过程"></a>程序执行的基本过程</h2><p>程序实际上是一条条指令，所以程序的运行过程就是把每一条指令一步步的执行起来，负责执行指令的就是CPU。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/CPU%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F.webp" alt="程序执行的基本过程"></p>
<ol>
<li><p>CPU读取<strong>程序计数器</strong>的值，该值即为指令的内存地址，然后<strong>控制单元</strong>操作<strong>地址总线</strong>指定需要访问的内存地址，接着通知内存准备数据，数据准备好后通过<strong>数据总线</strong>传输给CPU，CPU收到数据后将该指令存放到<strong>指令寄存器</strong>。</p>
</li>
<li><p>CPU分析指令寄存器中的指令，确定指令的类型以及参数，若是计算类型，则交由<strong>逻辑运算单元</strong>，若是存储类型，则交由<strong>控制单元</strong>。</p>
</li>
<li><p>当该指令执行完成后，<strong>程序计数器</strong>自增，自增大小有位宽决定，如果是32位宽，则自增4。</p>
</li>
</ol>
<p>以上过程不断循环，程序便跑起来了，这个循环过程成为<strong>CPU的指令周期</strong>。</p>
<h2 id="a-1-2执行具体过程"><a href="#a-1-2执行具体过程" class="headerlink" title="a = 1 + 2执行具体过程"></a>a = 1 + 2执行具体过程</h2><p>CPU可不认识什么a = 1 + 2，想要程序跑起来，首先要将其翻译成汇编语言，此过程称为汇编代码。</p>
<p>针对汇编代码，我们还需要用汇编器翻译成机器码，即01000101011这样的机器语言，此时才可以交由CPU完成执行。</p>
<p>汇编分为<code>数据段</code>与<code>指令段</code>，分别存放数据与指令。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp" alt="数据段与正文段"></p>
<p>编译器会把<code>a = 1 + 2</code>翻译成4条指令，存放到正文段中。如图，这 4 条指令被存放到了 0x200 ~ 0x20c 的区域中：</p>
<ul>
<li>0x200 的内容是 load 指令将 0x100 地址中的数据 1 装入到寄存器 R0；</li>
<li>0x204 的内容是 load 指令将 0x104 地址中的数据 2 装入到寄存器 R1；</li>
<li>0x208 的内容是 add 指令将寄存器 R0 和 R1 的数据相加，并把结果存放到寄存器 R2；</li>
<li>0x20c 的内容是 store 指令将寄存器 R2 中的数据存回数据段中的 0x108 地址中，这个地址也就是变量 a 内存中的地址；</li>
</ul>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>编译期在编译程序时，会构造指令，这个过程成为指令的编码。CPU执行程序时，就会解析指令，这个过程称为指令的解码。</p>
<p>现代CPU使用流水线方式执行指令，流水线方式将一条指令拆成四个阶段，如下图：</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp" alt="流水线执行模式"></p>
<ol>
<li><p><strong>Fetch</strong> -&gt; CPU通过程序计数器读取对应的内存地址的指令（获取指令）</p>
</li>
<li><p><strong>Decode</strong> -&gt; CPU对指令进行解码（指令译码）</p>
</li>
<li><p><strong>Execution</strong> -&gt; CPU执行指令（执行指令）</p>
</li>
<li><p><strong>Store</strong> -&gt; 将计算结果存回到寄存器或者将寄存器的值存回内存（数据回写）</p>
</li>
</ol>
<p>上面4个阶段，称为<strong>指令周期</strong>，CPU的工作就是一个接着一个执行，周而复始，事实上，不同的阶段有计算机的不同组件完成：</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/how-cpu-execute/%E6%95%B0%E6%8D%AE%E6%AE%B5%E4%B8%8E%E6%AD%A3%E6%96%87%E6%AE%B5.webp" alt="指令周期"></p>
<ul>
<li>取指令的阶段，我们的指令是存放在<strong>存储器</strong>里的，实际上，通过程序计数器和指令寄存器取出指令的过程，是由<strong>控制器</strong>操作的；</li>
<li>指令的译码过程，也是由<strong>控制器</strong>进行的；</li>
<li>指令执行的过程，无论是进行算术操作、逻辑操作，还是进行数据传输、条件分支操作，都是由<strong>算术逻辑单元操作</strong>的，也就是由<strong>运算器</strong>处理的。但是如果是一个简单的无条件地址跳转，则是直接在<strong>控制器</strong>里面完成的，不需要用到运算器。</li>
</ul>
<h3 id="指令的类型"><a href="#指令的类型" class="headerlink" title="指令的类型"></a>指令的类型</h3><p>指令从功能角度划分，可以分为 5 大类：</p>
<ul>
<li>数据传输类型的指令，比如 <code>store/load</code> 是寄存器与内存间数据传输的指令，<code>mov</code> 是将一个内存地址的数据移动到另一个内存地址的指令；</li>
<li>运算类型的指令，比如加减乘除、位运算、比较大小等等，它们最多只能处理两个寄存器中的数据；</li>
<li>跳转类型的指令，通过修改程序计数器的值来达到跳转执行指令的过程，比如编程中常见的 <code>if-else</code>、<code>swtich-case</code>、函数调用等。</li>
<li>信号类型的指令，比如发生中断的指令 <code>trap</code>；</li>
<li>闲置类型的指令，比如指令 <code>nop</code>，执行后 CPU 会空转一个周期</li>
</ul>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/31/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一切的起源都要从”Hello World”开始…</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客写作技巧</title>
    <url>/2022/01/03/hexo-writing-skills/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><p>Markdown作为一种标记语言，语法简单且易阅读易编写，可完全脱离鼠标写出样式丰富的文档，是日常工作以及写技术博客必备的技能之一。</p>
<table>
<thead>
<tr>
<th align="center">元素</th>
<th align="center">Markdown语法</th>
<th align="left">效果预览</th>
</tr>
</thead>
<tbody><tr>
<td align="center">标题</td>
<td align="center"><code># 标题1</code><br><code>## h2</code><br><code>### h3</code></td>
<td align="left"><div style="font-weight: bold"><div style="font-size: 24px">标题一</div><div style="font-size: 22px">标题二</div><div style="font-size: 20px">标题三</div></div></td>
</tr>
<tr>
<td align="center">加粗</td>
<td align="center"><code>**文字加粗**</code></td>
<td align="left"><strong>文字加粗</strong></td>
</tr>
<tr>
<td align="center">引用</td>
<td align="center"><code>&gt; 引用文字</code></td>
<td align="left"><blockquote>引用文字</blockquote></td>
</tr>
<tr>
<td align="center">有序列表</td>
<td align="center"><code>1. 第一项</code><br><code>2. 第二项</code><br><code>3. 第三项</code></td>
<td align="left"><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></td>
</tr>
<tr>
<td align="center">无序列表</td>
<td align="center"><code>- 第一项</code><br><code>- 第二项</code><br><code>- 第三项</code></td>
<td align="left"><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></td>
</tr>
<tr>
<td align="center">链接</td>
<td align="center"><code>[链接](url)</code></td>
<td align="left"><a href="url">链接</a></td>
</tr>
<tr>
<td align="center">图片</td>
<td align="center"><code>![图片](image.jpg)</code></td>
<td align="left"><i class="fa fa-image"></i></td>
</tr>
<tr>
<td align="center">水平线</td>
<td align="center"><code>---</code></td>
<td align="left"><hr></td>
</tr>
<tr>
<td align="center">代码</td>
<td align="center"><code>`code`</code></td>
<td align="left"><code>code</code></td>
</tr>
<tr>
<td align="center">代码块</td>
<td align="center"><code>```code snippet```</code></td>
<td align="left"><figure class="highlight"><table><tbody><tr><td class="code"><pre>code snippet</pre></td></tr></tbody></table></figure></td>
</tr>
</tbody></table>
<div class="note info">
            <p>更多语法请参考 <a href="https://www.markdownguide.org/basic-syntax">基础语法 | Markdown Guide</a> 和 <a href="https://www.markdownguide.org/extended-syntax">扩展语法 | Markdown Guide</a></p>
          </div>

<h2 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h2><p>Markdown满足了最基本的文档编写需求，<code>标签(Tag Plugin)</code>是Hexo提供的一种快速生成特定内容的方式，用来提供更多样式和功能，例如，标准的Markdown语法中，我们无法制定图片的大小，这是我们可以使用<code>标签</code>来解决。值得一提的是，<code>标签(Tag Plugin)</code>有Plugin的属性，你可以自主编写独特的标签来满足你的需求。</p>
<h3 id="1-文本居中的引用"><a href="#1-文本居中的引用" class="headerlink" title="1.文本居中的引用"></a>1.文本居中的引用</h3><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>看，<code>centerquote</code>是这样的，俺觉得这个用处不大</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<figure class="highlight html"><figcaption><span>标签语法</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span>blah blah blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签方式 --&gt;</span></span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-代码块的进阶用法"><a href="#2-代码块的进阶用法" class="headerlink" title="2.代码块的进阶用法"></a>2.代码块的进阶用法</h3><figure class="highlight yml"><figcaption><span>_config.xml</span><a href="https://github.com/lucidreamiss/">链接地址</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">清明梦</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;一起变好&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;博客&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">涛桑</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<p>代码块进阶语法规则：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; ```[language] [title] [url] [link text]</span></span><br><span class="line"><span class="quote">&gt;    code snippet</span></span><br><span class="line"><span class="quote">&gt; ```    </span></span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>langugae：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>
<li>title：代码块标题，将会显示在左上角</li>
<li>url：链接地址，如果没有指定 link text 则会在右上角显示 link</li>
<li>link text：链接名称，指定 url 后有效，将会显示在右上角</li>
</ul>
<p>url 必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以 url 为分界，左侧除了第一个单词会被解析为 language，其他所有单词都会被解析为 title，而右侧的所有单词都会被解析为 link text。</p>
<p>如果不想填写 title，可以在 language 和 url 之间添加至少三个空格。</p>
<p>可以在站点配置文件中设置 <code>highlight.auto_detect: true</code> 来开启自动语言检测高亮。</p>
<p>如果设置语言为 diff，可以在代码前添加 + 和 - 来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用。</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"> highlight:</span><br><span class="line">   enable: true</span><br><span class="line">   line_number: false</span><br><span class="line"><span class="deletion">-  auto_detect: false</span></span><br><span class="line"><span class="addition">+  auto_detect: true</span></span><br><span class="line">   tab_replace:</span><br></pre></td></tr></table></figure>

<h3 id="3-note标签"><a href="#3-note标签" class="headerlink" title="3.note标签"></a>3.note标签</h3><p>通过 note 标签可以为段落添加背景色，语法如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;% note class %&#125;</span><br><span class="line">文本内容 (支持行内标签)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，也可以不指定 class。</p>
<div class="note primary">
            <p>primary note tag</p>
          </div>

<div class="note success">
            <p>success note tag</p>
          </div>

<div class="note info">
            <p>info note tag</p>
          </div>

<div class="note warning">
            <p>warning note tag</p>
          </div>

<div class="note danger">
            <p>danger note tag</p>
          </div>

<div class="note ">
            <p>undefined class note tag</p>
          </div>

<p>样式配置可在主题配置文件中进行设置</p>
<figure class="highlight yml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 标签样式预设</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">modern</span>  <span class="comment"># simple | modern | flat | disabled</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span>  <span class="comment"># 是否显示图标</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span>  <span class="comment"># 圆角半径</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span>  <span class="comment"># 默认背景减淡效果，以百分比计算</span></span><br></pre></td></tr></table></figure>

<h3 id="4-label标签"><a href="#4-label标签" class="headerlink" title="4.label标签"></a>4.label标签</h3><p>使用label标签可以为文字添加背景色，语法如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@text %&#125;</span><br></pre></td></tr></table></figure>

<p>支持的class种类与<code>note</code>一致。</p>
<p>示例如下：</p>
<blockquote><p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span><br><span class="label success">I believe</span> I am<br><span class="label primary">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p>
</blockquote>

<p>可在主题配置文件中设置 <code>label: false</code> 来取消label标签默认CSS样式。</p>
<h3 id="5-button按钮"><a href="#5-button按钮" class="headerlink" title="5.button按钮"></a>5.button按钮</h3><p>通过button标签可以快速添加带有主题样式的按钮，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>

<p>也可简写为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>

<p>其中， 图标ID来源于 <a href="https://fontawesome.com/v4.7.0/icons/">FontAwesome</a> 。</p>
<p>使用示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% btn #, 文本 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure>

<p><a class="btn" href="#">
            <i class="fa fa-"></i>文本
          </a></p>
<p><a class="btn" href="#" title="标题">
            <i class="fa fa-"></i>文本 & 标题
          </a></p>
<p><a class="btn" href="#">
            <i class="fa fa-home"></i>文本 & 图标
          </a></p>
<p><a class="btn" href="#">
            <i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)
          </a></p>

<h3 id="6-tab标签"><a href="#6-tab标签" class="headerlink" title="6.tab标签"></a>6.tab标签</h3><p>tab标签用于快速创建tab选项卡，语法如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- tab [Tab caption]@[icon] --&gt;</span></span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  <span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>Unique name: 全局唯一的Tab名称，将作为各个标签页的id属性前缀</li>
<li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为-1则默认隐藏所有标签页</li>
<li>Tab caption: 当前标签页的标题，如果不指定则会以Unique name加上索引作为标题</li>
<li>icon: 在标签页标题中添加Font awesome图标</li>
</ul>
<p>使用示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line">    标签页1文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页2 --&gt;</span><br><span class="line">    标签页2文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页3 --&gt;</span><br><span class="line">    标签页3文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div>

<h3 id="7-引用站内链接"><a href="#7-引用站内链接" class="headerlink" title="7.引用站内链接"></a>7.引用站内链接</h3><p>可以通过如下语法引入站内文章的地址或链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的Markdown文件名。</p>
<p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p>
<p>如以下标签将会生成 <code>&#123;% post_path hexo-writing-skills %&#125;</code></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;% post_path hexo-writing-skills %&#125;</span><br></pre></td></tr></table></figure>

<p>而以下标签则会生成 <a href="/2022/01/03/hexo-writing-skills/" title="链接标题">链接标题</a></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-writing-skills 链接标题 %&#125;</span><br></pre></td></tr></table></figure>

<p>这种站内引用方式比直接使用url引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要Markdown文件名没有发生改变，引用链接都不会失效。</p>
<h3 id="8-插入Gist"><a href="#8-插入Gist" class="headerlink" title="8.插入Gist"></a>8.插入Gist</h3><p>如果需要在页面内插入Gist上的代码片段时，可以使用如下标签:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>gist_id: Gist仓库页面url中最后一段随机字符串</li>
<li>filename: Gist中的文件名</li>
</ul>
<p>如果Gist中只有一个文件，可以不用指定filename，也可以通过JavaScript脚本的形式直接引入，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://gist.github.com/Coodool/cb4ff46a3523955dd4b918dd775b6774.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果Gist中有多个文件，可以在标签内输入filename来指定只引入某个文件，如果没有指定filename，将会引入Gist中的所有文件。另外，引用JavaScript脚本形式无法精确控制只引入某一个文件，将会同时引入Gist中的所有文件。</p>
<p>如果指定了与Gist无法匹配的filename，页面上将不会显示任何标签内容。所以，一般在Gist只有一个文件的情况下无需指定filename。</p>
<div class="note warning">
            <p>在页面中引入Gist代码段将会同时从github服务器上下载脚本与CSS样式文件，由于国内访问github服务器延迟较高，往往资源文件连接和下载的速度很慢，会阻塞页面的渲染进程导致短时白屏。</p>
          </div>

<h2 id="插入多媒体"><a href="#插入多媒体" class="headerlink" title="插入多媒体"></a>插入多媒体</h2><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>Markdown并不会保存插入的图片资源本身，只是记录了获取资源的链接。因此我们需要选择一款合适的图床来支持博客写作，目前各大云服务商都提供了对象存储服务，如七牛云KODO、又拍云USS、腾讯云COS、阿里云OSS等。</p>
<p>所以在Markdown中插入一张图片要分为以下几步来进行：</p>
<ol>
<li>将图片资源上传到图床中</li>
<li>获取图片外链</li>
<li>插入到Markdown文档中</li>
</ol>
<p>对于博客这种低频访问的应用场景，各大服务商的服务其实并没有显著的差异，并且前期的使用都提供了免费的流量，所以我认为图床的选择主要参考以下几个方面：</p>
<ul>
<li><p>图床是否提供了便捷的图形化管理工具用于图片的上传下载？</p>
<p>如阿里云有ossbrowser，腾讯云有cosbrowser，七牛云有QsunSync等，但就本人使用体验来说，七牛云QsunSync的UI界面确实很拙劣，功能较为单一，而腾讯云cosbrowser的界面就相对美观优雅的多，并以Windows资源管理器的交互方式为用户提供资源的上传、下载和管理服务。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/hexo-writing-skills/cos_preview.png" alt="腾讯云COS客户端界面截图" title="腾讯云COS客户端界面截图"></p>
</li>
<li><p>是否能够方便的插入到Markdown文档中？</p>
<p>这就和服务商的关系不大了，主要看主流Markdown文档编辑器对各大图床的支持程度。其实关于在Markdown中更便捷的插入图片这事儿，最上心的还是文档编辑器的开发者，为了给用户提供更方便的文档写作体验，各大文档编辑器以及支持了Markdown语法的笔记软件都花了不少心思，解决方案无外乎两种，第一种是内置图片存储服务，如有道云笔记（需付费）、石墨文档，第二种是集成了云服务商的图床服务，如Hexo Editor、Mweb等，前者插入图片方便，适用于个人笔记，而后者能够提供CDN加速服务，适用于博客等公开文档。</p>
<p>其中Hexo Editor支持腾讯云和七牛云的一键上传服务，MWeb支持Imgur、七牛云、又拍云，也可自定义图床服务。</p>
</li>
</ul>
<div class="note info">
            <p>本站使用腾讯云COS提供对象存储服务。</p>
          </div>

<h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>在网页版云音乐中找到歌曲，点击生成外链播放器：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044431732.png" alt="获取歌曲外链" title="获取歌曲外链"></p>
<p>根据个人喜好选择播放器尺寸和播放模式：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181104044659251.png" alt="获取插件代码" title="获取插件代码"></p>
<p>将获取到的 <code>iframe</code> 代码添加到页面中，默认样式如下：</p>
<div class="fluid-vids" style="position: relative; margin-bottom: 20px; width: 100%; padding-top: 10.75%;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="329" height="86" src="//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66" style="width: 100%; height: 100%; position: absolute; top: 0px; left: 0px;">
</iframe></div>

<p>播放器宽度将会被拉长占满整个页宽，看起来有点别扭。查看控制台之后发现 <code>iframe</code> 在渲染的时候被处理过，外层包了一个类名为 <code>fluid-vids</code> 的 <code>div</code> 元素。顺藤摸瓜，找到了相关代码，原来是为了让嵌入的视频支持自适应布局，恰好也将 <code>music.163.com</code> 域名包含在了处理逻辑内，只需要将该行删除即可。</p>
<figure class="highlight js"><figcaption><span>themes\next\source\js\src\utils.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">SUPPORTED_PLAYERS</span> = [</span><br><span class="line">  <span class="string">&#x27;www.youtube.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;player.vimeo.com&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;player.youku.com&#x27;</span>,</span><br><span class="line">  <span class="comment">//&#x27;music.163.com&#x27;,</span></span><br><span class="line">  <span class="string">&#x27;www.tudou.com&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p>这样播放器样式就变成左对齐固定宽度了，如果你还想让播放器居中，可以将 <code>iframe</code> 包在 <code>&lt;center&gt;</code> 标签内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">329</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=34613621&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<center>
  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=329 height=86 src="//music.163.com/outchain/player?type=2&id=34613621&auto=0&height=66">
  </iframe>
</center>

<div class="note warning">
            <p>其实这种通过HTML标签实现CSS样式的做法并不合适，写前端代码的时候不推荐这么做，并且HTML5中也已经废除了 <code>&lt;center&gt;</code> <code>&lt;strong&gt;</code> 等纯粹为了改变样式而存在的HTML标签，HTML标签应该只负责文档结构，所有样式相关的工作应该交给CSS来实现。</p>
          </div>

<p>如果你发现播放器前后都有空行，可以在控制台中查看元素，检查 <code>iframe</code> 元素前后是否多了 <code>&lt;br&gt;</code> 元素：</p>
<p><img src="http://yearito-1256884783.image.myqcloud.com/hexo-writing-skills/20181027111824579.png" alt="播放器前后空行代码" title="播放器前后空行代码"></p>
<p>造成这样的原因是Markdown渲染引擎把 <code>&lt;center&gt;</code> 标签和 <code>&lt;iframe&gt;</code> 标签之间的回车当作 <code>&lt;br&gt;</code> 来处理了。参考链接: <a href="https://github.com/hexojs/hexo/issues/1388">Hexo issues #1388</a></p>
<p>简单的解决方案是将HTML标签写到一行内，但这样会降低代码可编辑性。</p>
<p>另外一种方案是在站点配置文件中添加如下代码：</p>
<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>重启服务器之后更改才会生效。</p>
<div class="note warning">
            <p>网易云音乐中部分歌曲因版权保护已经无法生成外链了，即使是通过控制台强行拿到外链地址，嵌入网页后也无法播放。</p>
          </div>

<h3 id="Aplayer音频播放器"><a href="#Aplayer音频播放器" class="headerlink" title="Aplayer音频播放器"></a>Aplayer音频播放器</h3><p><a href="https://aplayer.js.org/#/">APlayer</a>是由 <a href="https://github.com/DIYgod">DIYgod</a> 编写的HTML5音频播放器，提供了另一种音频播放方案。</p>
<div class="note ">
            <p>了解诞生背景： <a href="https://diygod.me/2167/">APlayer - 送给小狐狸和小兔子的 HTML5 播放器</a></p>
          </div>

<p>借助 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件，可以通过标签的形式方便快捷的插入音频组件。</p>
<p>在站点根目录下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>

<p>然后在页面中按照以下标签格式插入歌曲链接和相关信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ul>
<li>title: 曲目标题</li>
<li>author: 曲目作者</li>
<li>url: 音乐文件 URL 地址</li>
<li>picture_url: (可选) 音乐对应的图片地址</li>
<li>narrow: （可选）播放器袖珍风格</li>
<li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li>
<li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li>
<li>lrc:xxx: （可选）歌词文件 URL 地址</li>
</ul>
<p>示例效果如下：</p>

        <div id="aplayer-wyTbjqFe" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-wyTbjqFe"),
            narrow: false,
            autoplay: false,
            showlrc: 3,
            music: {
              title: "前前世世 -《君の名は。》",
              author: "RADWIMPS",
              url: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.mp3",
              pic: "http://pic.5577.com/up/2016-12/201612891712576.png",
              lrc: "https://moeplayer.b0.upaiyun.com/aplayer/yourname.lrc"
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

<p>当开启 Hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders.html#%E6%96%87%E7%AB%A0%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%A4%B9">文章资源文件夹</a> 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要统一实现固定宽度和居中样式，可以在自定义样式文件中添加如下样式规则</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">//Aplayer 播放器居中</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info">
            <p>插入播放列表功能请参考： <a href="https://github.com/MoePlayer/hexo-tag-aplayer#with-playlist">hexo-tag-aplayer | With playlist</a></p>
          </div>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>存储器结构层次</title>
    <url>/2022/01/24/memory-hierarchy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h2><p>存储器通常分成以下几个级别:</p>
<ul>
<li>寄存器</li>
<li>CPU Cache</li>
<li>内存</li>
<li>SSD/HDD硬盘</li>
</ul>
<img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%BB%93%E6%9E%84%E5%B1%82%E6%AC%A1.jpg" width=200/>

<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>最靠近CPU的控制单元与逻辑运算单元的就是寄存器了，他使用的材料速度是最快的，价格也是最昂贵的，存储容量很少。存储器的数量通常在几十到几百不等，每个寄存器可以用来存储一定字节的数据，比如</p>
<ul>
<li>32位CPU中大多数寄存器可以存储<strong>4</strong>个字节</li>
<li>64位CPU中大多数可以存储<strong>8</strong>个字节</li>
</ul>
<p>寄存器的访问速度非常快，一般要求在半个CPU时钟周期内完成读写，CPU时钟周期跟CPU主频息息相关，比如2GHz主频的CPU，那么它的时钟周期就是1/2G，也就是0.5ns。<br>CPU处理一条指令的时候，除了读写寄存器，还需要解码指令、控制指令和计算。如果寄存器的速度太慢，则会拉长指令的处理周期，从而给用户感觉很卡的样子。</p>
<div class="note info">
            <p><strong>时钟周期</strong>：CPU的硬件参数都会有<strong>GHz</strong>这个参数，比如一个1GHz的CPU，指的是时钟频率为1G，代表着1秒会产生1G次数的脉冲信号，每一次脉冲信号高低电平的转换就是一个周期，称为时钟周期。<br>对于CPU来说，一个时钟周期CPU仅能完成一个最基本的动作，时钟频率越高，则时钟周期越短，那么CPU工作的速度也就越快。</p>
          </div>

<h3 id="CPU-Cache"><a href="#CPU-Cache" class="headerlink" title="CPU Cache"></a>CPU Cache</h3><p>CPU Cache 使用<strong>SRAM（静态随机存储器）</strong>芯片。</p>
<div class="note info">
            <p>SRAM(静态随机存储器)：一个bit数据，通常需要6根晶体管保存，SRAM存储密度不高，但访问速度很快，之所以称为静态存储器，是因为只要有电，数据就会一直保持存在，停电消失。</p>
          </div>

<p>CPU Cache分为L1、L2、L3、这样的三层高速缓存。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/cpu_cache.jpg" alt="CPU三级高速缓存"></p>
<h4 id="L1高速缓存"><a href="#L1高速缓存" class="headerlink" title="L1高速缓存"></a>L1高速缓存</h4><p>L1高速缓存的访问速度几乎和寄存器一样快，通常只需要<code>2-4</code>个时钟周期，而大小在几十KB到几百KB不等。<br>每个CPU核心都有一块属于自己的L1高速缓存，指令和数据在L1是分开存放的，所以L1高速缓存通常分成指令缓存与数据缓存。</p>
<p>在Linux系统中，可以查看CPU L1 Cache <strong>数据</strong>缓存的容量大小：</p>
<figure class="highlight shell"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cache/index0/size</span></span><br><span class="line">32K</span><br></pre></td></tr></table></figure>

<p>L1 Cache <strong>指令</strong>缓存的容量大小：</p>
<figure class="highlight shell"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cache/index1/size</span></span><br><span class="line">32K</span><br></pre></td></tr></table></figure>

<h4 id="L2高速缓存"><a href="#L2高速缓存" class="headerlink" title="L2高速缓存"></a>L2高速缓存</h4><p>L2高速缓存同样每个CPU核心都有，但是L2高速缓存位置离CPU更远，大小比L1更大，访问速度更慢，速度在10~20个时钟周期。</p>
<figure class="highlight shell"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cache/index2/size</span></span><br><span class="line">256K</span><br></pre></td></tr></table></figure>

<h4 id="L3高速缓存"><a href="#L3高速缓存" class="headerlink" title="L3高速缓存"></a>L3高速缓存</h4><p>速度更慢，20~60个时钟周期；容量更大，几MB到几十MB。<br>L3高速缓存通常多个CPU核心共用，<em>这里会存在一些并发问题，后续我们来看看CPU是如何解决该问题的</em></p>
<figure class="highlight shell"><figcaption><span>linux</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /sys/devices/system/cpu/cpu0/cache/index3/size</span> </span><br><span class="line">3072K</span><br></pre></td></tr></table></figure>

<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存使用<strong>DRAM（动态随机存取存储器）</strong>保存数据。<br>相比SRAM，DRAM的密度更高，功耗更低，有更大的容量，而且造价比SRAM芯片便宜很多。<br>DRAM存储一个bit的数据只需要一个电容和一个晶体管即可，但是因为数据会被存储在电容里，而电容会不断漏电，所以需要定时刷新电容，才能保证数据不会被丢失，这就是DRAM之所以被称为<strong>动态</strong>存储器的原因，只有不断刷新，数据才会被存储起来。<br>DRAM的访问电路与刷新电路都更复杂，所以访问的速度会更慢，内存速度大概在<em>200~300</em>个时钟周期。</p>
<h3 id="SSD-HDD硬盘"><a href="#SSD-HDD硬盘" class="headerlink" title="SSD/HDD硬盘"></a>SSD/HDD硬盘</h3><p>SSD即固态硬盘，结构与内存类似，优点是断电数据也存在，内存的读写速度大概比SSD快10~1000倍。</p>
<p>HDD即传统的机械硬盘，使用物理读写的方式，所以速度很慢，大概比内存慢10w倍左右，差不多已经被SSD代替了。</p>
<h2 id="存储器的层次关系"><a href="#存储器的层次关系" class="headerlink" title="存储器的层次关系"></a>存储器的层次关系</h2><p>现代的一台计算机，都用上了CPU Cache、内存、SSD/HDD硬盘这些存储设备了。</p>
<p><img src="https://lucidreamiss-blog-1310999690.cos.ap-chengdu.myqcloud.com/memory-hierarchy/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.webp" alt="存储器的层次关系"></p>
<p>每个存储器只和与他相邻的一层存储器设备打交道。</p>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>存储器</tag>
      </tags>
  </entry>
</search>
